/**
 * skylark-data-files - The skylark file system library
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx-funcs/defer","skylark-langx-async","skylark-langx-paths","skylark-data-compression/inflate-raw","../../inodes/dir-inode","../../inodes/file-inode","../../inodes/file-index","../../no-sync-file","../synchronous-provider","../../error-codes","../../file-error","../../action-type","../../stats","../../file-type","../core/global","../core/util","./extended_ascii","./central-directory","./compression-method","./end-of-central-directory","./zip-toc"],function(c,e,t,r,n,s,i,a,o,d,l,h,p,u,f,y,E,g,I,w,m){const{arrayish2Buffer:v,copyingSlice:x,bufferValidator:_}=y;class D extends SynchronousProvider{constructor(e,t=""){super(),this.name=t,this._index=new FileIndex,this._directoryEntries=[],this._eocd=null,this._index=e.index,this._directoryEntries=e.directoryEntries,this._eocd=e.eocd,this.data=e.data}static Create(i,r){try{D._computeIndex(i.zipData,(e,t)=>{t?(t=new D(t,i.name),r(null,t)):r(e)})}catch(e){r(e)}}static isAvailable(){return!0}static _getEOCD(t){var i=Math.min(65557,t.length-1);for(let e=22;e<i;e++)if(101010256===t.readUInt32LE(t.length-e))return new w(t.slice(t.length-e));throw new l(d.EINVAL,"Invalid ZIP file: Could not locate End of Central Directory signature.")}static _addToIndex(e,t){let i=e.fileName();if("/"===i.charAt(0))throw new l(d.EPERM,"Unexpectedly encountered an absolute path in a zip file. Please file a bug.");"/"===i.charAt(i.length-1)&&(i=i.substr(0,i.length-1)),e.isDirectory()?t.addPathFast("/"+i,new n(e)):t.addPathFast("/"+i,new s(e))}static _computeIndex(e,t){try{var i,r,n=new FileIndex,o=D._getEOCD(e);return o.diskNumber()!==o.cdDiskNumber()?t(new l(d.EINVAL,"ZipProvider does not support spanned zip files.")):4294967295===(i=o.cdOffset())?t(new l(d.EINVAL,"ZipProvider does not support Zip64.")):(r=i+o.cdSize(),void D._computeIndexResponsive(e,n,i,r,t,[],o))}catch(e){t(e)}}static _computeIndexResponsiveTrampoline(e,t,i,r,n,o,s){try{D._computeIndexResponsive(e,t,i,r,n,o,s)}catch(e){n(e)}}static _computeIndexResponsive(t,i,r,n,o,s,a){if(r<n){let e=0;for(;e++<200&&r<n;){var d=new g(t,t.slice(r));D._addToIndex(d,i),r+=d.totalSize(),s.push(d)}c(()=>{D._computeIndexResponsiveTrampoline(t,i,r,n,o,s,a)})}else o(null,new m(i,s,a,t))}getName(){return D.Name+(""!==this.name?" "+this.name:"")}getCentralDirectoryEntry(e){var t=this._index.getInode(e);if(null===t)throw l.ENOENT(e);if(s.isFileInode(t))return t.getData();if(n.isDirInode(t))return t.getData();throw l.EPERM("Invalid inode: "+t)}getCentralDirectoryEntryAt(e){var t=this._directoryEntries[e];if(t)return t;throw new RangeError(`Invalid directory index: ${e}.`)}getNumberOfCentralDirectoryEntries(){return this._directoryEntries.length}getEndOfCentralDirectory(){return this._eocd}diskSpace(e,t){t(this.data.length,0)}isReadOnly(){return!0}supportsLinks(){return!1}supportsProps(){return!1}supportsSynch(){return!0}statSync(e,t){var i=this._index.getInode(e);if(null===i)throw l.ENOENT(e);let r;if(s.isFileInode(i))r=i.getData().getStats();else{if(!n.isDirInode(i))throw new l(d.EINVAL,"Invalid inode.");r=i.getStats()}return r}openSync(e,t,i){if(t.isWriteable())throw new l(d.EPERM,e);var r=this._index.getInode(e);if(!r)throw l.ENOENT(e);if(!s.isFileInode(r))throw l.EISDIR(e);var n=r.getData(),o=n.getStats();switch(t.pathExistsAction()){case h.THROW_EXCEPTION:case h.TRUNCATE_FILE:throw l.EEXIST(e);case h.NOP:return new a(this,e,t,o,n.getData());default:throw new l(d.EINVAL,"Invalid FileMode object.")}}readdirSync(e){var t=this._index.getInode(e);if(t){if(n.isDirInode(t))return t.getListing();throw l.ENOTDIR(e)}throw l.ENOENT(e)}readFileSync(e,t,i){e=this.openSync(e,i,420);try{var r=e.getBuffer();return null===t?x(r):r.toString(t)}finally{e.closeSync()}}}return D.Name="ZipProvider",D.Options={zipData:{type:"object",description:"The zip file as a Buffer object.",validator:_},name:{type:"string",optional:!0,description:"The name of the zip file (optional)."}},D.CompressionMethod=I,D.RegisterDecompressionMethod(I.DEFLATE,(e,t,i)=>v(r(e.slice(0,t),{chunkSize:i}))),D.RegisterDecompressionMethod(I.STORED,(e,t,i)=>x(e,0,i)),registry.add("zip",D),D});
//# sourceMappingURL=../../sourcemaps/providers/zip/zip-provider.js.map
