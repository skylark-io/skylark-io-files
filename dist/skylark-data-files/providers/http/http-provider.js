/**
 * skylark-data-files - The skylark file system library
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx-async","skylark-langx-paths","../../files","../registry","../../no-sync-file","../base-provider","../../error-codes","../../file-error","../../action-type","../../stats","../../file-type","../../utils","./xhr","./fetch","../../inodes/dir-inode","../../inodes/file-index","../../inodes/file-inode"],function(e,t,i,n,a,r,o,c,h,u,s,l,f,d,y,p,S){"use strict";const I=l["copyingSlice"],{xhrIsAvailable:g,asyncDownloadFile:E,syncDownloadFile:_,getFileSizeAsync:F,getFileSizeSync:x}=f,{fetchIsAvailable:T,fetchFileAsync:w,fetchFileSizeAsync:N}=d,A=S.isFileInode,v=y.isDirInode;function D(){throw new c(o.ENOTSUP,"Synchronous HTTP download methods are not available in this environment.")}class q extends r{constructor(e,t="",i=!1){super(),0<t.length&&"/"!==t.charAt(t.length-1)&&(t+="/"),this.prefixUrl=t,this._index=p.fromListing(e),!T||i&&g?(this._requestFileAsyncInternal=E,this._requestFileSizeAsyncInternal=F):(this._requestFileAsyncInternal=w,this._requestFileSizeAsyncInternal=N),g?(this._requestFileSyncInternal=_,this._requestFileSizeSyncInternal=x):(this._requestFileSyncInternal=D,this._requestFileSizeSyncInternal=D)}static Create(i,n){void 0===i.index&&(i.index="index.json"),"string"==typeof i.index?E(i.index,"json",(e,t)=>{e?n(e):n(null,new q(t,i.baseUrl))}):n(null,new q(i.index,i.baseUrl))}static isAvailable(){return g||T}empty(){this._index.fileIterator(function(e){e.fileData=null})}getName(){return q.Name}diskSpace(e,t){t(0,0)}isReadOnly(){return!0}supportsLinks(){return!1}supportsProps(){return!1}supportsSynch(){return g}preloadFile(e,t){var i=this._index.getInode(e);if(!A(i))throw c.EISDIR(e);if(null===i)throw c.ENOENT(e);e=i.getData();e.size=t.length,e.fileData=t}stat(e,t,i){var n=this._index.getInode(e);if(null===n)return i(c.ENOENT(e));let r;A(n)?(r=n.getData()).size<0?this._requestFileSizeAsync(e,function(e,t){if(e)return i(e);r.size=t,i(null,u.clone(r))}):i(null,u.clone(r)):v(n)?(r=n.getStats(),i(null,r)):i(c.FileError(o.EINVAL,e))}statSync(e,t){var i=this._index.getInode(e);if(null===i)throw c.ENOENT(e);let n;if(A(i))(n=i.getData()).size<0&&(n.size=this._requestFileSizeSync(e));else{if(!v(i))throw c.FileError(o.EINVAL,e);n=i.getStats()}return n}open(i,n,e,r){if(n.isWriteable())return r(new c(o.EPERM,i));const s=this;var t=this._index.getInode(i);if(null===t)return r(c.ENOENT(i));if(!A(t))return r(c.EISDIR(i));{const l=t.getData();switch(n.pathExistsAction()){case h.THROW_EXCEPTION:case h.TRUNCATE_FILE:return r(c.EEXIST(i));case h.NOP:if(l.fileData)return r(null,new a(s,i,n,u.clone(l),l.fileData));this._requestFileAsync(i,"buffer",function(e,t){return e?r(e):(l.size=t.length,l.fileData=t,r(null,new a(s,i,n,u.clone(l),t)))});break;default:return r(new c(o.EINVAL,"Invalid FileMode object."))}}}openSync(e,t,i){if(t.isWriteable())throw new c(o.EPERM,e);var n=this._index.getInode(e);if(null===n)throw c.ENOENT(e);if(!A(n))throw c.EISDIR(e);var r,s=n.getData();switch(t.pathExistsAction()){case h.THROW_EXCEPTION:case h.TRUNCATE_FILE:throw c.EEXIST(e);case h.NOP:return s.fileData?new a(this,e,t,u.clone(s),s.fileData):(r=this._requestFileSync(e,"buffer"),s.size=r.length,s.fileData=r,new a(this,e,t,u.clone(s),r));default:throw new c(o.EINVAL,"Invalid FileMode object.")}}readdir(e,t){try{t(null,this.readdirSync(e))}catch(e){t(e)}}readdirSync(e){var t=this._index.getInode(e);if(null===t)throw c.ENOENT(e);if(v(t))return t.getListing();throw c.ENOTDIR(e)}readFile(e,r,t,s){const l=s;this.open(e,t,420,function(e,n){if(e)return s(e);s=function(t,i){n.close(function(e){return t=t||e,l(t,i)})};var t=n.getBuffer();if(null===r)s(e,I(t));else{var e=t,t=r,i=s;try{i(null,e.toString(t))}catch(e){i(e)}}})}readFileSync(e,t,i){e=this.openSync(e,i,420);try{var n=e.getBuffer();return null===t?I(n):n.toString(t)}finally{e.closeSync()}}_getHTTPPath(e){return"/"===e.charAt(0)&&(e=e.slice(1)),this.prefixUrl+e}_requestFileAsync(e,t,i){this._requestFileAsyncInternal(this._getHTTPPath(e),t,i)}_requestFileSync(e,t){return this._requestFileSyncInternal(this._getHTTPPath(e),t)}_requestFileSizeAsync(e,t){this._requestFileSizeAsyncInternal(this._getHTTPPath(e),t)}_requestFileSizeSync(e){return this._requestFileSizeSyncInternal(this._getHTTPPath(e))}}return q.Name="http",q.Options={index:{type:["string","object"],optional:!0,description:"URL to a file index as a JSON file or the file index object itself, generated with the make_http_index script. Defaults to `index.json`."},baseUrl:{type:"string",optional:!0,description:"Used as the URL prefix for fetched files. Default: Fetch files relative to the index."},preferXHR:{type:"boolean",optional:!0,description:"Whether to prefer XmlHttpRequest or fetch for async operations if both are available. Default: false"}},n.add("http",q),i.providers.HttpProvider=q});
//# sourceMappingURL=../../sourcemaps/providers/http/http-provider.js.map
