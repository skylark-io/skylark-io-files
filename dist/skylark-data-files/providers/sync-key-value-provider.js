/**
 * skylark-data-files - The skylark file system library
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx-strings/generate-uuid","skylark-langx-binary/buffer","skylark-langx-paths","../files","../error-codes","../file-error","./base-provider","./synchronous-provider","../utils"],function(i,m,y,e,N,g,t,r,n){"use strict";const o=n["emptyBuffer"];class s extends r{static isAvailable(){return!0}constructor(e){super(),this.store=e.store,this.makeRootDirectory()}getName(){return this.store.name()}isReadOnly(){return!1}supportsSymlinks(){return!1}supportsProps(){return!1}supportsSynch(){return!0}empty(){this.store.clear(),this.makeRootDirectory()}renameSync(e,t){var r=this.store.beginTransaction("readwrite"),i=y.dirname(e),n=y.basename(e),o=y.dirname(t),s=y.basename(t),a=this.findINode(r,i),d=this.getDirListing(r,i,a);if(!d[n])throw g.ENOENT(e);var h=d[n];if(delete d[n],0===(o+"/").indexOf(e+"/"))throw new g(N.EBUSY,i);let c,f;if((f=o===i?(c=a,d):(c=this.findINode(r,o),this.getDirListing(r,o,c)))[s]){n=this.getINode(r,t,f[s]);if(!n.isFile())throw g.EPERM(t);try{r.del(n.id),r.del(f[s])}catch(e){throw r.abort(),e}}f[s]=h;try{r.put(a.id,m.from(JSON.stringify(d)),!0),r.put(c.id,m.from(JSON.stringify(f)),!0)}catch(e){throw r.abort(),e}r.commit()}statSync(e,t){return this.findINode(this.store.beginTransaction("readonly"),e).toStats()}createFileSync(e,t,r){var i=this.store.beginTransaction("readwrite"),n=o(),i=this.commitNewFile(i,e,FileType.FILE,r,n);return new SyncKeyValueFile(this,e,t,i.toStats(),n)}openFileSync(e,t){var r=this.store.beginTransaction("readonly"),i=this.findINode(r,e),r=r.get(i.id);if(void 0===r)throw g.ENOENT(e);return new SyncKeyValueFile(this,e,t,i.toStats(),r)}unlinkSync(e){this.removeEntry(e,!1)}rmdirSync(e){if(0<this.readdirSync(e).length)throw g.ENOTEMPTY(e);this.removeEntry(e,!0)}mkdirSync(e,t){var r=this.store.beginTransaction("readwrite"),i=m.from("{}");this.commitNewFile(r,e,FileType.DIRECTORY,t,i)}readdirSync(e){var t=this.store.beginTransaction("readonly");return Object.keys(this.getDirListing(t,e,this.findINode(t,e)))}_syncSync(e,t,r){var i=this.store.beginTransaction("readwrite"),n=this._findINode(i,y.dirname(e),y.basename(e)),e=this.getINode(i,e,n),r=e.update(r);try{i.put(e.id,t,!0),r&&i.put(n,e.toBuffer(),!0)}catch(e){throw i.abort(),e}i.commit()}makeRootDirectory(){var e,t=this.store.beginTransaction("readwrite");void 0===t.get(ROOT_NODE_ID)&&(e=(new Date).getTime(),e=new Inode(i(),4096,511|FileType.DIRECTORY,e,e,e),t.put(e.id,getEmptyDirNode(),!1),t.put(ROOT_NODE_ID,e.toBuffer(),!1),t.commit())}_findINode(t,r,i){var e=e=>{e=this.getDirListing(t,r,e);if(e[i])return e[i];throw g.ENOENT(y.resolve(r,i))};return"/"===r?""===i?ROOT_NODE_ID:e(this.getINode(t,r,ROOT_NODE_ID)):e(this.getINode(t,r+y.sep+i,this._findINode(t,y.dirname(r),y.basename(r))))}findINode(e,t){return this.getINode(e,t,this._findINode(e,y.dirname(t),y.basename(t)))}getINode(e,t,r){e=e.get(r);if(void 0===e)throw g.ENOENT(t);return Inode.fromBuffer(e)}getDirListing(e,t,r){if(!r.isDirectory())throw g.ENOTDIR(t);e=e.get(r.id);if(void 0===e)throw g.ENOENT(t);return JSON.parse(e.toString())}addNewNode(e,t){for(var r;;)try{return r=i(),e.put(r,t,!1),r}catch(e){}throw new g(N.EIO,"Unable to commit data to key-value store.")}commitNewFile(t,e,r,i,n){var o=y.dirname(e),s=y.basename(e),a=this.findINode(t,o),o=this.getDirListing(t,o,a),d=(new Date).getTime();if("/"===e)throw g.EEXIST(e);if(o[s])throw g.EEXIST(e);let h;try{var c=this.addNewNode(t,n),f=(h=new Inode(c,n.length,i|r,d,d,d),this.addNewNode(t,h.toBuffer()));o[s]=f,t.put(a.id,m.from(JSON.stringify(o)),!0)}catch(e){throw t.abort(),e}return t.commit(),h}removeEntry(e,t){var r=this.store.beginTransaction("readwrite"),i=y.dirname(e),n=this.findINode(r,i),i=this.getDirListing(r,i,n),o=y.basename(e);if(!i[o])throw g.ENOENT(e);var s=i[o],o=(delete i[o],this.getINode(r,e,s));if(!t&&o.isDirectory())throw g.EISDIR(e);if(t&&!o.isDirectory())throw g.ENOTDIR(e);try{r.del(o.id),r.del(s),r.put(n.id,m.from(JSON.stringify(i)),!0)}catch(e){throw r.abort(),e}r.commit()}}return e.providers.SyncKeyValueProvider=s});
//# sourceMappingURL=../sourcemaps/providers/sync-key-value-provider.js.map
