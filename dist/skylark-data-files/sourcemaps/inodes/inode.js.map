{"version":3,"sources":["inodes/inode.js"],"names":["define","Buffer","Stats","FileType","Inode","constructor","id","size","mode","atime","mtime","ctime","this","fromBuffer","buffer","undefined","Error","toString","readUInt32LE","readUInt16LE","readDoubleLE","toStats","DIRECTORY","FILE","getSize","length","toBuffer","buff","alloc","writeUInt32LE","writeUInt16LE","writeDoubleLE","write","update","stats","let","hasChanged","atimeMs","getTime","mtimeMs","ctimeMs","isFile","isDirectory"],"mappings":";;;;;;;AAAAA,OAAO,CACH,8BACA,WACA,gBACD,SAAUC,EAAOC,EAAMC,GACtB,aA4GA,aAtGMC,EACFC,YAAYC,EAAIC,EAAMC,EAAMC,EAAOC,EAAOC,GACtCC,KAAKN,GAAKA,EACVM,KAAKL,KAAOA,EACZK,KAAKJ,KAAOA,EACZI,KAAKH,MAAQA,EACbG,KAAKF,MAAQA,EACbE,KAAKD,MAAQA,CACjB,CAKAE,kBAAkBC,GACd,GAAeC,KAAAA,IAAXD,EACA,MAAM,IAAIE,MAAM,IAAI,EAExB,OAAO,IAAIZ,EAAMU,EAAOG,SAAS,QAAS,EAAE,EAAGH,EAAOI,aAAa,CAAC,EAAGJ,EAAOK,aAAa,CAAC,EAAGL,EAAOM,aAAa,CAAC,EAAGN,EAAOM,aAAa,EAAE,EAAGN,EAAOM,aAAa,EAAE,CAAC,CAC3K,CAKAC,UACI,OAAO,IAAInB,GAAmB,MAAZU,KAAKJ,QAAmBL,EAASmB,UAAYnB,EAASmB,UAAYnB,EAASoB,KAAMX,KAAKL,KAAMK,KAAKJ,KAAMI,KAAKH,MAAOG,KAAKF,MAAOE,KAAKD,KAAK,CAC/J,CAKAa,UAEI,OAAO,GAAKZ,KAAKN,GAAGmB,MACxB,CAKAC,SAASC,EAAO1B,EAAO2B,MAAMhB,KAAKY,QAAQ,CAAC,GAOvC,OANAG,EAAKE,cAAcjB,KAAKL,KAAM,CAAC,EAC/BoB,EAAKG,cAAclB,KAAKJ,KAAM,CAAC,EAC/BmB,EAAKI,cAAcnB,KAAKH,MAAO,CAAC,EAChCkB,EAAKI,cAAcnB,KAAKF,MAAO,EAAE,EACjCiB,EAAKI,cAAcnB,KAAKD,MAAO,EAAE,EACjCgB,EAAKK,MAAMpB,KAAKN,GAAI,GAAIM,KAAKN,GAAGmB,OAAQ,OAAO,EACxCE,CACX,CAYAM,OAAOC,GACHC,IAAIC,EAAa,CAAA,EACbxB,KAAKL,OAAS2B,EAAM3B,OACpBK,KAAKL,KAAO2B,EAAM3B,KAClB6B,EAAa,CAAA,GAEbxB,KAAKJ,OAAS0B,EAAM1B,OACpBI,KAAKJ,KAAO0B,EAAM1B,KAClB4B,EAAa,CAAA,GAEjB,IAAMC,EAAUH,EAAMzB,MAAM6B,QAAQ,EAK9BC,GAJF3B,KAAKH,QAAU4B,IACfzB,KAAKH,MAAQ4B,EACbD,EAAa,CAAA,GAEDF,EAAMxB,MAAM4B,QAAQ,GAK9BE,GAJF5B,KAAKF,QAAU6B,IACf3B,KAAKF,MAAQ6B,EACbH,EAAa,CAAA,GAEDF,EAAMvB,MAAM2B,QAAQ,GAKpC,OAJI1B,KAAKD,QAAU6B,IACf5B,KAAKD,MAAQ6B,EACbJ,EAAa,CAAA,GAEVA,CACX,CAMAK,SACI,OAAoB,MAAZ7B,KAAKJ,QAAmBL,EAASoB,IAC7C,CAIAmB,cACI,OAAoB,MAAZ9B,KAAKJ,QAAmBL,EAASmB,SAC7C,CACJ,CAIJ,CAAC","file":"../../inodes/inode.js","sourcesContent":["define([\r\n    \"skylark-langx-binary/buffer\",\r\n    '../stats',\r\n    '../file-type'\r\n], function (Buffer,Stats,FileType) {\r\n    'use strict';\r\n\r\n\r\n    /**\r\n     * Generic inode definition that can easily be serialized.\r\n     */\r\n    class Inode {\r\n        constructor(id, size, mode, atime, mtime, ctime) {\r\n            this.id = id;\r\n            this.size = size;\r\n            this.mode = mode;\r\n            this.atime = atime;\r\n            this.mtime = mtime;\r\n            this.ctime = ctime;\r\n        }\r\n\r\n        /**\r\n         * Converts the buffer into an Inode.\r\n         */\r\n        static fromBuffer(buffer) {\r\n            if (buffer === undefined) {\r\n                throw new Error(\"NO\");\r\n            }\r\n            return new Inode(buffer.toString('ascii', 30), buffer.readUInt32LE(0), buffer.readUInt16LE(4), buffer.readDoubleLE(6), buffer.readDoubleLE(14), buffer.readDoubleLE(22));\r\n        }\r\n\r\n        /**\r\n         * Handy function that converts the Inode to a Node Stats object.\r\n         */\r\n        toStats() {\r\n            return new Stats((this.mode & 0xF000) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE, this.size, this.mode, this.atime, this.mtime, this.ctime);\r\n        }\r\n\r\n        /**\r\n         * Get the size of this Inode, in bytes.\r\n         */\r\n        getSize() {\r\n            // ASSUMPTION: ID is ASCII (1 byte per char).\r\n            return 30 + this.id.length;\r\n        }\r\n\r\n        /**\r\n         * Writes the inode into the start of the buffer.\r\n         */\r\n        toBuffer(buff = Buffer.alloc(this.getSize())) {\r\n            buff.writeUInt32LE(this.size, 0);\r\n            buff.writeUInt16LE(this.mode, 4);\r\n            buff.writeDoubleLE(this.atime, 6);\r\n            buff.writeDoubleLE(this.mtime, 14);\r\n            buff.writeDoubleLE(this.ctime, 22);\r\n            buff.write(this.id, 30, this.id.length, 'ascii');\r\n            return buff;\r\n        }\r\n        \r\n        /**\r\n         * Updates the Inode using information from the stats object. Used by file\r\n         * systems at sync time, e.g.:\r\n         * - Program opens file and gets a File object.\r\n         * - Program mutates file. File object is responsible for maintaining\r\n         *   metadata changes locally -- typically in a Stats object.\r\n         * - Program closes file. File object's metadata changes are synced with the\r\n         *   file system.\r\n         * @return True if any changes have occurred.\r\n         */\r\n        update(stats) {\r\n            let hasChanged = false;\r\n            if (this.size !== stats.size) {\r\n                this.size = stats.size;\r\n                hasChanged = true;\r\n            }\r\n            if (this.mode !== stats.mode) {\r\n                this.mode = stats.mode;\r\n                hasChanged = true;\r\n            }\r\n            const atimeMs = stats.atime.getTime();\r\n            if (this.atime !== atimeMs) {\r\n                this.atime = atimeMs;\r\n                hasChanged = true;\r\n            }\r\n            const mtimeMs = stats.mtime.getTime();\r\n            if (this.mtime !== mtimeMs) {\r\n                this.mtime = mtimeMs;\r\n                hasChanged = true;\r\n            }\r\n            const ctimeMs = stats.ctime.getTime();\r\n            if (this.ctime !== ctimeMs) {\r\n                this.ctime = ctimeMs;\r\n                hasChanged = true;\r\n            }\r\n            return hasChanged;\r\n        }\r\n        // XXX: Copied from Stats. Should reconcile these two into something more\r\n        //      compact.\r\n        /**\r\n         * @return [Boolean] True if this item is a file.\r\n         */\r\n        isFile() {\r\n            return (this.mode & 0xF000) === FileType.FILE;\r\n        }\r\n        /**\r\n         * @return [Boolean] True if this item is a directory.\r\n         */\r\n        isDirectory() {\r\n            return (this.mode & 0xF000) === FileType.DIRECTORY;\r\n        }\r\n    }\r\n\r\n\r\n    return Inode;\r\n});"]}