{"version":3,"sources":["stats.js"],"names":["define","Buffer","files","FileType","Stats","constructor","itemType","size","mode","atimeMs","mtimeMs","ctimeMs","birthtimeMs","this","dev","ino","rdev","nlink","blksize","uid","gid","fileData","let","currentTime","Date","now","FILE","DIRECTORY","blocks","Math","ceil","fromBuffer","buffer","readUInt32LE","atime","readDoubleLE","mtime","ctime","clone","s","birthtime","toBuffer","alloc","writeUInt32LE","writeDoubleLE","getTime","isFile","isDirectory","isSymbolicLink","SYMLINK","chmod","isSocket","isBlockDevice","isCharacterDevice","isFIFO"],"mappings":";;;;;;;AAAAA,OAAO,CACH,8BACA,UACA,eACF,SAAUC,EAAOC,EAAMC,GACrB,aAqKA,OAAOD,EAAME,YA5JPA,EAYFC,YAAYC,EAAUC,EAAMC,EAAMC,EAASC,EAASC,EAASC,GAOzDC,KAAKC,IAAM,EAEXD,KAAKE,IAAM,EAEXF,KAAKG,KAAO,EAEZH,KAAKI,MAAQ,EAEbJ,KAAKK,QAAU,KAGfL,KAAKM,IAAM,EAEXN,KAAKO,IAAM,EAEXP,KAAKQ,SAAW,KAChBR,KAAKN,KAAOA,EACZe,IAAIC,EAAc,EACO,UAArB,OAAO,IAEPd,EADAc,EAAcC,KAAKC,IAAI,GAGF,UAArB,OAAO,IAIPf,EAHKa,EAAAA,GACaC,KAAKC,IAAI,GAIN,UAArB,OAAO,IAIPd,EAHKY,EAAAA,GACaC,KAAKC,IAAI,GAIF,UAAzB,OAAO,IAIPb,EAHKW,EAAAA,GACaC,KAAKC,IAAI,GAI/BZ,KAAKJ,QAAUA,EACfI,KAAKF,QAAUA,EACfE,KAAKH,QAAUA,EACfG,KAAKD,YAAcA,EACdJ,EAWDK,KAAKL,KAAOA,EAVJF,IACCH,EAASuB,KACVb,KAAKL,KAAO,KAEXL,EAASwB,UAEVd,KAAKL,KAAO,KAOxBK,KAAKe,OAASC,KAAKC,KAAKvB,EAAO,GAAG,EAG9BM,KAAKL,KAAO,OACZK,KAAKL,MAAQF,EAErB,CACAyB,kBAAkBC,GACd,IAAMzB,EAAOyB,EAAOC,aAAa,CAAC,EAAGzB,EAAOwB,EAAOC,aAAa,CAAC,EAAGC,EAAQF,EAAOG,aAAa,CAAC,EAAGC,EAAQJ,EAAOG,aAAa,EAAE,EAAGE,EAAQL,EAAOG,aAAa,EAAE,EACnK,OAAO,IAAI/B,EAAa,MAAPI,EAAeD,EAAa,KAAPC,EAAc0B,EAAOE,EAAOC,CAAK,CAC3E,CAIAC,aAAaC,GACT,OAAO,IAAInC,EAAe,MAATmC,EAAE/B,KAAe+B,EAAEhC,KAAe,KAATgC,EAAE/B,KAAc+B,EAAE9B,QAAS8B,EAAE7B,QAAS6B,EAAE5B,QAAS4B,EAAE3B,WAAW,CAC5G,CACAsB,YACI,OAAO,IAAIV,KAAKX,KAAKJ,OAAO,CAChC,CACA2B,YACI,OAAO,IAAIZ,KAAKX,KAAKH,OAAO,CAChC,CACA2B,YACI,OAAO,IAAIb,KAAKX,KAAKF,OAAO,CAChC,CACA6B,gBACI,OAAO,IAAIhB,KAAKX,KAAKD,WAAW,CACpC,CACA6B,WACI,IAAMT,EAAS/B,EAAOyC,MAAM,EAAE,EAM9B,OALAV,EAAOW,cAAc9B,KAAKN,KAAM,CAAC,EACjCyB,EAAOW,cAAc9B,KAAKL,KAAM,CAAC,EACjCwB,EAAOY,cAAc/B,KAAKqB,MAAMW,QAAQ,EAAG,CAAC,EAC5Cb,EAAOY,cAAc/B,KAAKuB,MAAMS,QAAQ,EAAG,EAAE,EAC7Cb,EAAOY,cAAc/B,KAAKwB,MAAMQ,QAAQ,EAAG,EAAE,EACtCb,CACX,CAIAc,SACI,OAAoB,MAAZjC,KAAKL,QAAmBL,EAASuB,IAC7C,CAIAqB,cACI,OAAoB,MAAZlC,KAAKL,QAAmBL,EAASwB,SAC7C,CAIAqB,iBACI,OAAoB,MAAZnC,KAAKL,QAAmBL,EAAS8C,OAC7C,CAKAC,MAAM1C,GACFK,KAAKL,KAAoB,MAAZK,KAAKL,KAAiBA,CACvC,CAEA2C,WACI,MAAO,CAAA,CACX,CACAC,gBACI,MAAO,CAAA,CACX,CACAC,oBACI,MAAO,CAAA,CACX,CACAC,SACI,MAAO,CAAA,CACX,CACJ,CAIJ,CAAC","file":"../stats.js","sourcesContent":["define([\r\n    'skylark-langx-binary/buffer',\r\n    \"./files\",\r\n    \"./file-type\"\r\n],function (Buffer,files,FileType) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Emulation of Node's `fs.Stats` object.\r\n     *\r\n     * Attribute descriptions are from `man 2 stat'\r\n     * @see http://nodejs.org/api/fs.html#fs_class_fs_stats\r\n     * @see http://man7.org/linux/man-pages/man2/stat.2.html\r\n     */\r\n    class Stats {\r\n        /**\r\n         * Provides information about a particular entry in the file system.\r\n         * @param itemType Type of the item (FILE, DIRECTORY, SYMLINK, or SOCKET)\r\n         * @param size Size of the item in bytes. For directories/symlinks,\r\n         *   this is normally the size of the struct that represents the item.\r\n         * @param mode Unix-style file mode (e.g. 0o644)\r\n         * @param atimeMs time of last access, in milliseconds since epoch\r\n         * @param mtimeMs time of last modification, in milliseconds since epoch\r\n         * @param ctimeMs time of last time file status was changed, in milliseconds since epoch\r\n         * @param birthtimeMs time of file creation, in milliseconds since epoch\r\n         */\r\n        constructor(itemType, size, mode, atimeMs, mtimeMs, ctimeMs, birthtimeMs) {\r\n            /**\r\n             * UNSUPPORTED ATTRIBUTES\r\n             * I assume no one is going to need these details, although we could fake\r\n             * appropriate values if need be.\r\n             */\r\n            // ID of device containing file\r\n            this.dev = 0;\r\n            // inode number\r\n            this.ino = 0;\r\n            // device ID (if special file)\r\n            this.rdev = 0;\r\n            // number of hard links\r\n            this.nlink = 1;\r\n            // blocksize for file system I/O\r\n            this.blksize = 4096;\r\n            // @todo Maybe support these? atm, it's a one-user filesystem.\r\n            // user ID of owner\r\n            this.uid = 0;\r\n            // group ID of owner\r\n            this.gid = 0;\r\n            // XXX: Some file systems stash data on stats objects.\r\n            this.fileData = null;\r\n            this.size = size;\r\n            let currentTime = 0;\r\n            if (typeof (atimeMs) !== 'number') {\r\n                currentTime = Date.now();\r\n                atimeMs = currentTime;\r\n            }\r\n            if (typeof (mtimeMs) !== 'number') {\r\n                if (!currentTime) {\r\n                    currentTime = Date.now();\r\n                }\r\n                mtimeMs = currentTime;\r\n            }\r\n            if (typeof (ctimeMs) !== 'number') {\r\n                if (!currentTime) {\r\n                    currentTime = Date.now();\r\n                }\r\n                ctimeMs = currentTime;\r\n            }\r\n            if (typeof (birthtimeMs) !== 'number') {\r\n                if (!currentTime) {\r\n                    currentTime = Date.now();\r\n                }\r\n                birthtimeMs = currentTime;\r\n            }\r\n            this.atimeMs = atimeMs;\r\n            this.ctimeMs = ctimeMs;\r\n            this.mtimeMs = mtimeMs;\r\n            this.birthtimeMs = birthtimeMs;\r\n            if (!mode) {\r\n                switch (itemType) {\r\n                    case FileType.FILE:\r\n                        this.mode = 0x1a4;\r\n                        break;\r\n                    case FileType.DIRECTORY:\r\n                    default:\r\n                        this.mode = 0x1ff;\r\n                }\r\n            }\r\n            else {\r\n                this.mode = mode;\r\n            }\r\n            // number of 512B blocks allocated\r\n            this.blocks = Math.ceil(size / 512);\r\n            // Check if mode also includes top-most bits, which indicate the file's\r\n            // type.\r\n            if (this.mode < 0x1000) {\r\n                this.mode |= itemType;\r\n            }\r\n        }\r\n        static fromBuffer(buffer) {\r\n            const size = buffer.readUInt32LE(0), mode = buffer.readUInt32LE(4), atime = buffer.readDoubleLE(8), mtime = buffer.readDoubleLE(16), ctime = buffer.readDoubleLE(24);\r\n            return new Stats(mode & 0xF000, size, mode & 0xFFF, atime, mtime, ctime);\r\n        }\r\n        /**\r\n         * Clones the stats object.\r\n         */\r\n        static clone(s) {\r\n            return new Stats(s.mode & 0xF000, s.size, s.mode & 0xFFF, s.atimeMs, s.mtimeMs, s.ctimeMs, s.birthtimeMs);\r\n        }\r\n        get atime() {\r\n            return new Date(this.atimeMs);\r\n        }\r\n        get mtime() {\r\n            return new Date(this.mtimeMs);\r\n        }\r\n        get ctime() {\r\n            return new Date(this.ctimeMs);\r\n        }\r\n        get birthtime() {\r\n            return new Date(this.birthtimeMs);\r\n        }\r\n        toBuffer() {\r\n            const buffer = Buffer.alloc(32);\r\n            buffer.writeUInt32LE(this.size, 0);\r\n            buffer.writeUInt32LE(this.mode, 4);\r\n            buffer.writeDoubleLE(this.atime.getTime(), 8);\r\n            buffer.writeDoubleLE(this.mtime.getTime(), 16);\r\n            buffer.writeDoubleLE(this.ctime.getTime(), 24);\r\n            return buffer;\r\n        }\r\n        /**\r\n         * @return [Boolean] True if this item is a file.\r\n         */\r\n        isFile() {\r\n            return (this.mode & 0xF000) === FileType.FILE;\r\n        }\r\n        /**\r\n         * @return [Boolean] True if this item is a directory.\r\n         */\r\n        isDirectory() {\r\n            return (this.mode & 0xF000) === FileType.DIRECTORY;\r\n        }\r\n        /**\r\n         * @return [Boolean] True if this item is a symbolic link (only valid through lstat)\r\n         */\r\n        isSymbolicLink() {\r\n            return (this.mode & 0xF000) === FileType.SYMLINK;\r\n        }\r\n        /**\r\n         * Change the mode of the file. We use this helper function to prevent messing\r\n         * up the type of the file, which is encoded in mode.\r\n         */\r\n        chmod(mode) {\r\n            this.mode = (this.mode & 0xF000) | mode;\r\n        }\r\n        // We don't support the following types of files.\r\n        isSocket() {\r\n            return false;\r\n        }\r\n        isBlockDevice() {\r\n            return false;\r\n        }\r\n        isCharacterDevice() {\r\n            return false;\r\n        }\r\n        isFIFO() {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    return files.Stats = Stats;\r\n});"]}