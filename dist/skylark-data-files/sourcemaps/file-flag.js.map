{"version":3,"sources":["file-flag.js"],"names":["define","files","ErrorCodes","FileError","ActionType","FileFlag","constructor","flagStr","this","validFlagStrs","indexOf","EINVAL","getFileFlag","flagCache","hasOwnProperty","getFlagString","isReadable","isWriteable","isTruncating","isAppendable","isSynchronous","isExclusive","pathExistsAction","THROW_EXCEPTION","TRUNCATE_FILE","NOP","pathNotExistsAction","CREATE_FILE"],"mappings":";;;;;;;AAAAA,OAAO,CACL,UACA,gBACA,eACA,iBACC,SAAUC,EAAMC,EAAWC,EAAUC,GACpC,mBAsBIC,EAMFC,YAAYC,GAER,GADAC,KAAKD,QAAUA,EACXF,EAASI,cAAcC,QAAQH,CAAO,EAAI,EAC1C,MAAM,IAAIJ,EAAUD,EAAWS,OAAQ,iBAAmBJ,CAAO,CAEzE,CAOAK,mBAAmBL,GAEf,OAAIF,EAASQ,UAAUC,eAAeP,CAAO,EAClCF,EAASQ,UAAUN,GAEvBF,EAASQ,UAAUN,GAAW,IAAIF,EAASE,CAAO,CAC7D,CAIAQ,gBACI,OAAOP,KAAKD,OAChB,CAIAS,aACI,MAAqC,CAAC,IAA/BR,KAAKD,QAAQG,QAAQ,GAAG,GAA0C,CAAC,IAA/BF,KAAKD,QAAQG,QAAQ,GAAG,CACvE,CAIAO,cACI,MAAqC,CAAC,IAA/BT,KAAKD,QAAQG,QAAQ,GAAG,GAA0C,CAAC,IAA/BF,KAAKD,QAAQG,QAAQ,GAAG,GAA0C,CAAC,IAA/BF,KAAKD,QAAQG,QAAQ,GAAG,CAC3G,CAIAQ,eACI,MAAqC,CAAC,IAA/BV,KAAKD,QAAQG,QAAQ,GAAG,CACnC,CAIAS,eACI,MAAqC,CAAC,IAA/BX,KAAKD,QAAQG,QAAQ,GAAG,CACnC,CAIAU,gBACI,MAAqC,CAAC,IAA/BZ,KAAKD,QAAQG,QAAQ,GAAG,CACnC,CAIAW,cACI,MAAqC,CAAC,IAA/Bb,KAAKD,QAAQG,QAAQ,GAAG,CACnC,CAKAY,mBACI,OAAId,KAAKa,YAAY,EACVjB,EAAWmB,gBAEbf,KAAKU,aAAa,EAChBd,EAAWoB,cAGXpB,EAAWqB,GAE1B,CAKAC,sBACI,OAAKlB,KAAKS,YAAY,GAAKT,KAAKW,aAAa,IAAuB,OAAjBX,KAAKD,QAC7CH,EAAWuB,YAGXvB,EAAWmB,eAE1B,CACJ,CAQA,OANAlB,EAASQ,UAAY,GAErBR,EAASI,cAAgB,CAAC,IAAK,KAAM,KAAM,MAAO,IAAK,KAAM,KAAM,MAAO,IAAK,KAAM,KAAM,OAIpFR,EAAMI,SAAWA,CAC1B,CAAC","file":"../file-flag.js","sourcesContent":["define([\r\n  \"./files\",\r\n  './error-codes',\r\n  \"./file-error\",\r\n  \"./action-type\"\r\n], function (files,ErrorCodes,FileError,ActionType) {\r\n    'use strict';\r\n\r\n\r\n\r\n  /**\r\n   * Represents one of the following file flags. A convenience object.\r\n   *\r\n   * * `'r'` - Open file for reading. An exception occurs if the file does not exist.\r\n   * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.\r\n   * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.\r\n   * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.\r\n   * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\r\n   * * `'wx'` - Like 'w' but opens the file in exclusive mode.\r\n   * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\r\n   * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.\r\n   * * `'a'` - Open file for appending. The file is created if it does not exist.\r\n   * * `'ax'` - Like 'a' but opens the file in exclusive mode.\r\n   * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.\r\n   * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.\r\n   *\r\n   * Exclusive mode ensures that the file path is newly created.\r\n   */\r\n  class FileFlag {\r\n      /**\r\n       * This should never be called directly.\r\n       * @param modeStr The string representing the mode\r\n       * @throw when the mode string is invalid\r\n       */\r\n      constructor(flagStr) {\r\n          this.flagStr = flagStr;\r\n          if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {\r\n              throw new FileError(ErrorCodes.EINVAL, \"Invalid flag: \" + flagStr);\r\n          }\r\n      }\r\n      /**\r\n       * Get an object representing the given file flag.\r\n       * @param modeStr The string representing the flag\r\n       * @return The FileFlag object representing the flag\r\n       * @throw when the flag string is invalid\r\n       */\r\n      static getFileFlag(flagStr) {\r\n          // Check cache first.\r\n          if (FileFlag.flagCache.hasOwnProperty(flagStr)) {\r\n              return FileFlag.flagCache[flagStr];\r\n          }\r\n          return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);\r\n      }\r\n      /**\r\n       * Get the underlying flag string for this flag.\r\n       */\r\n      getFlagString() {\r\n          return this.flagStr;\r\n      }\r\n      /**\r\n       * Returns true if the file is readable.\r\n       */\r\n      isReadable() {\r\n          return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file is writeable.\r\n       */\r\n      isWriteable() {\r\n          return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file mode should truncate.\r\n       */\r\n      isTruncating() {\r\n          return this.flagStr.indexOf('w') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file is appendable.\r\n       */\r\n      isAppendable() {\r\n          return this.flagStr.indexOf('a') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file is open in synchronous mode.\r\n       */\r\n      isSynchronous() {\r\n          return this.flagStr.indexOf('s') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file is open in exclusive mode.\r\n       */\r\n      isExclusive() {\r\n          return this.flagStr.indexOf('x') !== -1;\r\n      }\r\n      /**\r\n       * Returns one of the static fields on this object that indicates the\r\n       * appropriate response to the path existing.\r\n       */\r\n      pathExistsAction() {\r\n          if (this.isExclusive()) {\r\n              return ActionType.THROW_EXCEPTION;\r\n          }\r\n          else if (this.isTruncating()) {\r\n              return ActionType.TRUNCATE_FILE;\r\n          }\r\n          else {\r\n              return ActionType.NOP;\r\n          }\r\n      }\r\n      /**\r\n       * Returns one of the static fields on this object that indicates the\r\n       * appropriate response to the path not existing.\r\n       */\r\n      pathNotExistsAction() {\r\n          if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {\r\n              return ActionType.CREATE_FILE;\r\n          }\r\n          else {\r\n              return ActionType.THROW_EXCEPTION;\r\n          }\r\n      }\r\n  }\r\n  // Contains cached FileMode instances.\r\n  FileFlag.flagCache = {};\r\n  // Array of valid mode strings.\r\n  FileFlag.validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];\r\n\r\n\r\n\r\n  return files.FileFlag = FileFlag;\r\n});"]}