{"version":3,"sources":["providers/localstorage/local-storage-store.js"],"names":["define","Buffer","SimpleSyncRWTransaction","ErrorCodes","FileError","name","LocalStorageProvider","Name","clear","window","localStorage","beginTransaction","type","this","get","key","data","getItem","from","binaryEncoding","e","put","overwrite","setItem","toString","ENOSPC","del","removeItem","EIO"],"mappings":";;;;;;;AAAAA,OAAO,CACH,8BACA,gCACA,oBACA,oBACD,SAAUC,EAAOC,EAAyBC,EAAWC,GACpD,aAsDA,aA/CIC,OACI,OAAOC,qBAAqBC,IAChC,CACAC,QACIC,OAAOC,aAAaF,MAAM,CAC9B,CACAG,iBAAiBC,GAEb,OAAO,IAAIV,EAAwBW,IAAI,CAC3C,CACAC,IAAIC,GACA,IACI,IAAMC,EAAOP,OAAOC,aAAaO,QAAQF,CAAG,EAC5C,GAAa,OAATC,EACA,OAAOf,EAAOiB,KAAKF,EAAMG,cAAc,CAK/C,CAFA,MAAOC,IAKX,CACAC,IAAIN,EAAKC,EAAMM,GACX,IACI,OAAKA,GAAkD,OAArCb,OAAOC,aAAaO,QAAQF,CAAG,GAIjDN,OAAOC,aAAaa,QAAQR,EAAKC,EAAKQ,SAASL,cAAc,CAAC,EACvD,CAAA,GAHI,CAAA,CAOf,CAFA,MAAOC,GACH,MAAM,IAAIhB,EAAUD,EAAWsB,OAAQ,uBAAuB,CAClE,CACJ,CACAC,IAAIX,GACA,IACIN,OAAOC,aAAaiB,WAAWZ,CAAG,CAItC,CAFA,MAAOK,GACH,MAAM,IAAIhB,EAAUD,EAAWyB,IAAK,wBAA0Bb,EAAM,KAAOK,CAAC,CAChF,CACJ,CACJ,CAIJ,CAAC","file":"../../../providers/localstorage/local-storage-store.js","sourcesContent":["define([\r\n    \"skylark-langx-binary/buffer\",\r\n    '../simple-sync-rw-transaction',\r\n    '../../error-codes',\r\n    '../../file-error',\r\n], function (Buffer,SimpleSyncRWTransaction, ErrorCodes,FileError) {\r\n    'use strict';\r\n\r\n\r\n    /**\r\n     * A synchronous key-value store backed by localStorage.\r\n     */\r\n    class LocalStorageStore {\r\n        name() {\r\n            return LocalStorageProvider.Name;\r\n        }\r\n        clear() {\r\n            window.localStorage.clear();\r\n        }\r\n        beginTransaction(type) {\r\n            // No need to differentiate.\r\n            return new SimpleSyncRWTransaction(this);\r\n        }\r\n        get(key) {\r\n            try {\r\n                const data = window.localStorage.getItem(key);\r\n                if (data !== null) {\r\n                    return Buffer.from(data, binaryEncoding);\r\n                }\r\n            }\r\n            catch (e) {\r\n                // Do nothing.\r\n            }\r\n            // Key doesn't exist, or a failure occurred.\r\n            return undefined;\r\n        }\r\n        put(key, data, overwrite) {\r\n            try {\r\n                if (!overwrite && window.localStorage.getItem(key) !== null) {\r\n                    // Don't want to overwrite the key!\r\n                    return false;\r\n                }\r\n                window.localStorage.setItem(key, data.toString(binaryEncoding));\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                throw new FileError(ErrorCodes.ENOSPC, \"LocalStorage is full.\");\r\n            }\r\n        }\r\n        del(key) {\r\n            try {\r\n                window.localStorage.removeItem(key);\r\n            }\r\n            catch (e) {\r\n                throw new FileError(ErrorCodes.EIO, \"Unable to delete key \" + key + \": \" + e);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return LocalStorageStore;\r\n});"]}