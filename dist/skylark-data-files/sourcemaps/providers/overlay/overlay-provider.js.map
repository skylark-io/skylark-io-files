{"version":3,"sources":["providers/overlay/overlay-provider.js"],"names":["define","paths","files","registry","Stats","FileType","FileError","ErrorCodes","FileFlag","ActionType","LockedProvider","UnlockedOverlayProvider","OverlayProvider","constructor","writable","readable","super","Create","opts","cb","fs","_initialize","e","isAvailable","getOverlayedProviders","getFSUnlocked","unwrap","Name","Options","type","description","add","providers"],"mappings":";;;;;;;AAAAA,OAAO,CACH,sBACA,cACA,cACA,cACA,kBACA,mBACA,oBACA,kBACA,oBACA,qBACA,+BACD,SAAUC,EAAMC,EAAMC,EAAUC,EAAMC,EAASC,EAAWC,EAAYC,EAASC,EAAWC,EAAeC,SAQlGC,UAAwBF,EAK1BG,YAAYC,EAAUC,GAClBC,MAAM,IAAIL,EAAwBG,EAAUC,CAAQ,CAAC,CACzD,CAIAE,cAAcC,EAAMC,GAChB,IACI,MAAMC,EAAK,IAAIR,EAAgBM,EAAKJ,SAAUI,EAAKH,QAAQ,EAC3DK,EAAGC,YAAY,IACXF,EAAGG,EAAGF,CAAE,CACZ,CAAC,CAIL,CAFA,MAAOE,GACHH,EAAGG,CAAC,CACR,CACJ,CACAC,qBACI,OAAOZ,EAAwBY,YAAY,CAC/C,CACAC,wBACI,OAAOR,MAAMS,cAAc,EAAED,sBAAsB,CACvD,CACAE,SACI,OAAOV,MAAMS,cAAc,CAC/B,CACAJ,YAAYF,GACRH,MAAMS,cAAc,EAAEJ,YAAYF,CAAE,CACxC,CACJ,CAgBA,OAfAP,EAAgBe,KAAO,kBACvBf,EAAgBgB,QAAU,CACtBd,SAAU,CACNe,KAAM,SACNC,YAAa,6CACjB,EACAf,SAAU,CACNc,KAAM,SACNC,YAAa,4DACjB,CACJ,EAEA3B,EAAS4B,IAAI,UAAUnB,CAAe,EAG/BV,EAAM8B,UAAUpB,gBAAkBA,CAC7C,CAAC","file":"../../../providers/overlay/overlay-provider.js","sourcesContent":["define([\r\n    \"skylark-langx-paths\",\r\n    \"../../files\",\r\n    \"../registry\",\r\n    '../../stats',\r\n    '../../file-type',\r\n    '../../file-error',\r\n    '../../error-codes',\r\n    \"../../file-flag\",\r\n    \"../../action-type\",\r\n    \"../locked-provider\",\r\n    \"./unlocked-overlay-provider\"\r\n], function (paths,files,registry, Stats,FileType,FileError, ErrorCodes, FileFlag,ActionType,LockedProvider,UnlockedOverlayProvider) {\r\n\r\n\r\n    /**\r\n     * OverlayProvidermakes a read-only filesystem writable by storing writes on a second,\r\n     * writable file system. Deletes are persisted via metadata stored on the writable\r\n     * file system.\r\n     */\r\n    class OverlayProvider extends LockedProvider {\r\n        /**\r\n         * @param writable The file system to write modified files to.\r\n         * @param readable The file system that initially populates this file system.\r\n         */\r\n        constructor(writable, readable) {\r\n            super(new UnlockedOverlayProvider(writable, readable));\r\n        }\r\n        /**\r\n         * Constructs and initializes an OverlayProviderinstance with the given options.\r\n         */\r\n        static Create(opts, cb) {\r\n            try {\r\n                const fs = new OverlayProvider(opts.writable, opts.readable);\r\n                fs._initialize((e) => {\r\n                    cb(e, fs);\r\n                });\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        static isAvailable() {\r\n            return UnlockedOverlayProvider.isAvailable();\r\n        }\r\n        getOverlayedProviders() {\r\n            return super.getFSUnlocked().getOverlayedProviders();\r\n        }\r\n        unwrap() {\r\n            return super.getFSUnlocked();\r\n        }\r\n        _initialize(cb) {\r\n            super.getFSUnlocked()._initialize(cb);\r\n        }\r\n    }\r\n    OverlayProvider.Name = \"OverlayProvider\";\r\n    OverlayProvider.Options = {\r\n        writable: {\r\n            type: \"object\",\r\n            description: \"The file system to write modified files to.\"\r\n        },\r\n        readable: {\r\n            type: \"object\",\r\n            description: \"The file system that initially populates this file system.\"\r\n        }\r\n    };\r\n\r\n    registry.add(\"overlay\",OverlayProvider);\r\n\r\n\r\n    return files.providers.OverlayProvider = OverlayProvider;\r\n});"]}