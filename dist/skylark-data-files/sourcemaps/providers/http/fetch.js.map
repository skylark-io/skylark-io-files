{"version":3,"sources":["providers/http/fetch.js"],"names":["define","Buffer","ErrorCodes","FileError","fetchIsAvailable","fetch","fetchFileAsync","p","type","cb","let","request","e","EINVAL","message","then","res","ok","EIO","status","arrayBuffer","from","buf","catch","err","json","fetchFileSizeAsync","method","parseInt","headers","get"],"mappings":";;;;;;;AAAAA,OAAO,CACH,8BACA,oBACA,oBACD,SAAUC,EAAOC,EAAWC,GAC3B,aAyDA,MAAO,CACHC,iBAvDyC,aAAnB,OAAO,OAAqC,OAAVC,MAwDxDC,eAtDJ,SAAwBC,EAAGC,EAAMC,GAC7BC,IAAIC,EACJ,IACIA,EAAUN,MAAME,CAAC,CAKrB,CAHA,MAAOK,GAEH,OAAOH,EAAG,IAAIN,EAAUD,EAAWW,OAAQD,EAAEE,OAAO,CAAC,CACzD,CACAH,EACKI,KAAK,IACN,GAAKC,CAAAA,EAAIC,GACL,OAAOR,EAAG,IAAIN,EAAUD,EAAWgB,IAAK,uCAAuCF,EAAIG,MAAQ,CAAC,EAG5F,OAAQX,GACJ,IAAK,SACDQ,EAAII,YAAY,EACXL,KAAK,GAASN,EAAG,KAAMR,EAAOoB,KAAKC,CAAG,CAAC,CAAC,EACxCC,MAAM,GAASd,EAAG,IAAIN,EAAUD,EAAWgB,IAAKM,EAAIV,OAAO,CAAC,CAAC,EAClE,MACJ,IAAK,OACDE,EAAIS,KAAK,EACJV,KAAK,GAAUN,EAAG,KAAMgB,CAAI,CAAC,EAC7BF,MAAM,GAASd,EAAG,IAAIN,EAAUD,EAAWgB,IAAKM,EAAIV,OAAO,CAAC,CAAC,EAClE,MACJ,QACIL,EAAG,IAAIN,EAAUD,EAAWW,OAAQ,0BAA4BL,CAAI,CAAC,CAC7E,CAER,CAAC,EACIe,MAAM,GAASd,EAAG,IAAIN,EAAUD,EAAWgB,IAAKM,EAAIV,OAAO,CAAC,CAAC,CACtE,EAuBIY,mBAhBJ,SAA4BnB,EAAGE,GAC3BJ,MAAME,EAAG,CAAEoB,OAAQ,MAAO,CAAC,EACtBZ,KAAK,GACDC,EAAIC,GAIER,EAAG,KAAMmB,SAASZ,EAAIa,QAAQC,IAAI,gBAAgB,GAAK,KAAM,EAAE,CAAC,EAHhErB,EAAG,IAAIN,EAAUD,EAAWgB,IAAK,4CAA4CF,EAAIG,MAAQ,CAAC,CAKxG,EACII,MAAM,GAASd,EAAG,IAAIN,EAAUD,EAAWgB,IAAKM,EAAIV,OAAO,CAAC,CAAC,CACtE,CAMA,CACJ,CAAC","file":"../../../providers/http/fetch.js","sourcesContent":["define([\r\n    \"skylark-langx-binary/buffer\",\r\n    '../../error-codes',\r\n    '../../file-error'\r\n], function (Buffer,ErrorCodes,FileError) {\r\n    'use strict';\r\n\r\n\r\n    const fetchIsAvailable = (typeof (fetch) !== \"undefined\" && fetch !== null);\r\n\r\n    function fetchFileAsync(p, type, cb) {\r\n        let request;\r\n        try {\r\n            request = fetch(p);\r\n        }\r\n        catch (e) {\r\n            // XXX: fetch will throw a TypeError if the URL has credentials in it\r\n            return cb(new FileError(ErrorCodes.EINVAL, e.message));\r\n        }\r\n        request\r\n            .then((res) => {\r\n            if (!res.ok) {\r\n                return cb(new FileError(ErrorCodes.EIO, `fetch error: response returned code ${res.status}`));\r\n            }\r\n            else {\r\n                switch (type) {\r\n                    case 'buffer':\r\n                        res.arrayBuffer()\r\n                            .then((buf) => cb(null, Buffer.from(buf)))\r\n                            .catch((err) => cb(new FileError(ErrorCodes.EIO, err.message)));\r\n                        break;\r\n                    case 'json':\r\n                        res.json()\r\n                            .then((json) => cb(null, json))\r\n                            .catch((err) => cb(new FileError(ErrorCodes.EIO, err.message)));\r\n                        break;\r\n                    default:\r\n                        cb(new FileError(ErrorCodes.EINVAL, \"Invalid download type: \" + type));\r\n                }\r\n            }\r\n        })\r\n            .catch((err) => cb(new FileError(ErrorCodes.EIO, err.message)));\r\n    }\r\n\r\n    /**\r\n     * Asynchronously retrieves the size of the given file in bytes.\r\n     * @hidden\r\n     */\r\n\r\n    function fetchFileSizeAsync(p, cb) {\r\n        fetch(p, { method: 'HEAD' })\r\n            .then((res) => {\r\n            if (!res.ok) {\r\n                return cb(new FileError(ErrorCodes.EIO, `fetch HEAD error: response returned code ${res.status}`));\r\n            }\r\n            else {\r\n                return cb(null, parseInt(res.headers.get('Content-Length') || '-1', 10));\r\n            }\r\n        })\r\n            .catch((err) => cb(new FileError(ErrorCodes.EIO, err.message)));\r\n    }\r\n\r\n    return {\r\n        fetchIsAvailable: fetchIsAvailable,\r\n        fetchFileAsync: fetchFileAsync,\r\n        fetchFileSizeAsync: fetchFileSizeAsync\r\n    };\r\n});"]}