{"version":3,"sources":["providers/zip/file-header.js"],"names":["define","ErrorCodes","FileError","msdos2date","safeToString","constructor","data","this","readUInt32LE","EINVAL","versionNeeded","readUInt16LE","flags","compressionMethod","lastModFileTime","rawLastModFileTime","crc32","fileNameLength","extraFieldLength","fileName","useUTF8","extraField","start","slice","totalSize"],"mappings":";;;;;;;AAAAA,OAAO,CACH,oBACA,mBACA,eACA,oBACD,SAAUC,EAAYC,EAAUC,EAAWC,GAC1C,aAiEA,aA5CIC,YAAYC,GAER,GAA6B,YAD7BC,KAAKD,KAAOA,GACHE,aAAa,CAAC,EACnB,MAAM,IAAIN,EAAUD,EAAWQ,OAAQ,8DAAgEF,KAAKD,KAAKE,aAAa,CAAC,CAAC,CAExI,CACAE,gBAAkB,OAAOH,KAAKD,KAAKK,aAAa,CAAC,CAAG,CACpDC,QAAU,OAAOL,KAAKD,KAAKK,aAAa,CAAC,CAAG,CAC5CE,oBAAsB,OAAON,KAAKD,KAAKK,aAAa,CAAC,CAAG,CACxDG,kBAEI,OAAOX,EAAWI,KAAKD,KAAKK,aAAa,EAAE,EAAGJ,KAAKD,KAAKK,aAAa,EAAE,CAAC,CAC5E,CACAI,qBACI,OAAOR,KAAKD,KAAKE,aAAa,EAAE,CACpC,CACAQ,QAAU,OAAOT,KAAKD,KAAKE,aAAa,EAAE,CAAG,CAc7CS,iBAAmB,OAAOV,KAAKD,KAAKK,aAAa,EAAE,CAAG,CACtDO,mBAAqB,OAAOX,KAAKD,KAAKK,aAAa,EAAE,CAAG,CACxDQ,WACI,OAAOf,EAAaG,KAAKD,KAAMC,KAAKa,QAAQ,EAAG,GAAIb,KAAKU,eAAe,CAAC,CAC5E,CACAI,aACI,IAAMC,EAAQ,GAAKf,KAAKU,eAAe,EACvC,OAAOV,KAAKD,KAAKiB,MAAMD,EAAOA,EAAQf,KAAKW,iBAAiB,CAAC,CACjE,CACAM,YAAc,OAAO,GAAKjB,KAAKU,eAAe,EAAIV,KAAKW,iBAAiB,CAAG,CAC3EE,UAAY,OAAkC,OAAX,KAAfb,KAAKK,MAAM,EAAsB,CACzD,CAKJ,CAAC","file":"../../../providers/zip/file-header.js","sourcesContent":["define([\r\n    '../../error-codes',\r\n    '../../file-error',\r\n    \"./msdos2date\",\r\n    \"./safe-to-string\"\r\n], function (ErrorCodes, FileError,msdos2date,safeToString) {\r\n    'use strict';\r\n\r\n    /**\r\n     * 4.3.7  Local file header:\r\n     *\r\n     *     local file header signature     4 bytes  (0x04034b50)\r\n     *     version needed to extract       2 bytes\r\n     *     general purpose bit flag        2 bytes\r\n     *     compression method              2 bytes\r\n     *    last mod file time              2 bytes\r\n     *    last mod file date              2 bytes\r\n     *    crc-32                          4 bytes\r\n     *    compressed size                 4 bytes\r\n     *    uncompressed size               4 bytes\r\n     *    file name length                2 bytes\r\n     *    extra field length              2 bytes\r\n     *\r\n     *    file name (variable size)\r\n     *    extra field (variable size)\r\n     */\r\n    class FileHeader {\r\n        constructor(data) {\r\n            this.data = data;\r\n            if (data.readUInt32LE(0) !== 0x04034b50) {\r\n                throw new FileError(ErrorCodes.EINVAL, \"Invalid Zip file: Local file header has invalid signature: \" + this.data.readUInt32LE(0));\r\n            }\r\n        }\r\n        versionNeeded() { return this.data.readUInt16LE(4); }\r\n        flags() { return this.data.readUInt16LE(6); }\r\n        compressionMethod() { return this.data.readUInt16LE(8); }\r\n        lastModFileTime() {\r\n            // Time and date is in MS-DOS format.\r\n            return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));\r\n        }\r\n        rawLastModFileTime() {\r\n            return this.data.readUInt32LE(10);\r\n        }\r\n        crc32() { return this.data.readUInt32LE(14); }\r\n        /**\r\n         * These two values are COMPLETELY USELESS.\r\n         *\r\n         * Section 4.4.9:\r\n         *   If bit 3 of the general purpose bit flag is set,\r\n         *   these fields are set to zero in the local header and the\r\n         *   correct values are put in the data descriptor and\r\n         *   in the central directory.\r\n         *\r\n         * So we'll just use the central directory's values.\r\n         */\r\n        // public compressedSize(): number { return this.data.readUInt32LE(18); }\r\n        // public uncompressedSize(): number { return this.data.readUInt32LE(22); }\r\n        fileNameLength() { return this.data.readUInt16LE(26); }\r\n        extraFieldLength() { return this.data.readUInt16LE(28); }\r\n        fileName() {\r\n            return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());\r\n        }\r\n        extraField() {\r\n            const start = 30 + this.fileNameLength();\r\n            return this.data.slice(start, start + this.extraFieldLength());\r\n        }\r\n        totalSize() { return 30 + this.fileNameLength() + this.extraFieldLength(); }\r\n        useUTF8() { return (this.flags() & 0x800) === 0x800; }\r\n    }\r\n\r\n\r\n    return FileHeader;\r\n\r\n});"]}