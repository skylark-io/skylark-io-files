{"version":3,"sources":["providers/zip/extended-ascii.js"],"names":["define","ExtendedASCII","str2byte","str","buf","charIdx","length","let","i","charCode","charCodeAt","extendedChars","indexOf","charAt","byte2str","buff","chars","Array","String","fromCharCode","join","byteLength"],"mappings":";;;;;;;AAAAA,OAAO,WACH,mBAQMC,EACFC,gBAAgBC,EAAKC,GACjB,IAKcC,EALRC,GAASH,EAAIG,OAASF,EAAIE,OAASF,EAAaD,GAATG,OAC7C,IAAKC,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,CAAC,GAAI,CAC7BD,IAAIE,EAAWN,EAAIO,WAAWF,CAAC,EAS/BJ,EAJQK,EAJO,IAAXA,GAGc,CAAC,GADTJ,EAAUJ,EAAcU,cAAcC,QAAQT,EAAIU,OAAOL,CAAC,CAAC,GAElDH,EAAU,IAIzBI,GAAYD,CACpB,CACA,OAAOF,CACX,CACAQ,gBAAgBC,GACZ,IAAMC,EAAQ,IAAIC,MAAMF,EAAKT,MAAM,EACnC,IAAKC,IAAIC,EAAI,EAAGA,EAAIO,EAAKT,OAAQE,CAAC,GAAI,CAClC,IAAMC,EAAWM,EAAKP,GAElBQ,EAAMR,GADK,IAAXC,EACWR,EAAcU,cAAcF,EAAW,KAGvCS,OAAOC,aAAaV,CAAQ,CAE/C,CACA,OAAOO,EAAMI,KAAK,EAAE,CACxB,CACAC,kBAAkBlB,GAAO,OAAOA,EAAIG,MAAQ,CAChD,CAoBA,OAlBAL,EAAcU,cAAgB,CAAC,IAAU,IAAU,IAAU,IAAU,IACnE,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IAC5D,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IAC5D,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IAC5D,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IAC5D,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IAC5D,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IAC5D,IAAU,IAAK,IAAK,IAAK,IAAU,IAAU,IAAU,IAAU,IACjE,IAAU,IAAU,IAAU,IAAK,IAAK,IAAU,IAAU,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAU,IAAU,IAAK,IAAK,IAAK,IAAK,IAAU,IACtE,IAAK,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IACjE,IAAU,IAAU,IAAU,IAAK,IAAK,IAAK,IAAK,IAAU,IAAU,IACtE,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IAC5D,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IAC5D,IAAU,IAAU,IAAU,IAAU,IAAK,IAAU,IAAU,IACjE,IAAU,IAAU,IAAU,IAAU,IAAU,IAAU,IAC5D,IAAU,IAAK,KAEZV,CACX,CAAC","file":"../../../providers/zip/extended-ascii.js","sourcesContent":["define(function () {\r\n    'use strict';\r\n    /**\r\n     * (Nonstandard) String utility function for 8-bit ASCII with the extended\r\n     * character set. Unlike the ASCII above, we do not mask the high bits.\r\n     *\r\n     * Placed into a separate file so it can be used with other Buffer implementations.\r\n     * @see http://en.wikipedia.org/wiki/Extended_ASCII\r\n     */\r\n    class ExtendedASCII {\r\n        static str2byte(str, buf) {\r\n            const length = str.length > buf.length ? buf.length : str.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let charCode = str.charCodeAt(i);\r\n                if (charCode > 0x7F) {\r\n                    // Check if extended ASCII.\r\n                    const charIdx = ExtendedASCII.extendedChars.indexOf(str.charAt(i));\r\n                    if (charIdx > -1) {\r\n                        charCode = charIdx + 0x80;\r\n                    }\r\n                    // Otherwise, keep it as-is.\r\n                }\r\n                buf[charCode] = i;\r\n            }\r\n            return length;\r\n        }\r\n        static byte2str(buff) {\r\n            const chars = new Array(buff.length);\r\n            for (let i = 0; i < buff.length; i++) {\r\n                const charCode = buff[i];\r\n                if (charCode > 0x7F) {\r\n                    chars[i] = ExtendedASCII.extendedChars[charCode - 128];\r\n                }\r\n                else {\r\n                    chars[i] = String.fromCharCode(charCode);\r\n                }\r\n            }\r\n            return chars.join('');\r\n        }\r\n        static byteLength(str) { return str.length; }\r\n    }\r\n    \r\n    ExtendedASCII.extendedChars = ['\\u00C7', '\\u00FC', '\\u00E9', '\\u00E2', '\\u00E4',\r\n        '\\u00E0', '\\u00E5', '\\u00E7', '\\u00EA', '\\u00EB', '\\u00E8', '\\u00EF',\r\n        '\\u00EE', '\\u00EC', '\\u00C4', '\\u00C5', '\\u00C9', '\\u00E6', '\\u00C6',\r\n        '\\u00F4', '\\u00F6', '\\u00F2', '\\u00FB', '\\u00F9', '\\u00FF', '\\u00D6',\r\n        '\\u00DC', '\\u00F8', '\\u00A3', '\\u00D8', '\\u00D7', '\\u0192', '\\u00E1',\r\n        '\\u00ED', '\\u00F3', '\\u00FA', '\\u00F1', '\\u00D1', '\\u00AA', '\\u00BA',\r\n        '\\u00BF', '\\u00AE', '\\u00AC', '\\u00BD', '\\u00BC', '\\u00A1', '\\u00AB',\r\n        '\\u00BB', '_', '_', '_', '\\u00A6', '\\u00A6', '\\u00C1', '\\u00C2', '\\u00C0',\r\n        '\\u00A9', '\\u00A6', '\\u00A6', '+', '+', '\\u00A2', '\\u00A5', '+', '+', '-',\r\n        '-', '+', '-', '+', '\\u00E3', '\\u00C3', '+', '+', '-', '-', '\\u00A6', '-',\r\n        '+', '\\u00A4', '\\u00F0', '\\u00D0', '\\u00CA', '\\u00CB', '\\u00C8', 'i',\r\n        '\\u00CD', '\\u00CE', '\\u00CF', '+', '+', '_', '_', '\\u00A6', '\\u00CC', '_',\r\n        '\\u00D3', '\\u00DF', '\\u00D4', '\\u00D2', '\\u00F5', '\\u00D5', '\\u00B5',\r\n        '\\u00FE', '\\u00DE', '\\u00DA', '\\u00DB', '\\u00D9', '\\u00FD', '\\u00DD',\r\n        '\\u00AF', '\\u00B4', '\\u00AD', '\\u00B1', '_', '\\u00BE', '\\u00B6', '\\u00A7',\r\n        '\\u00F7', '\\u00B8', '\\u00B0', '\\u00A8', '\\u00B7', '\\u00B9', '\\u00B3',\r\n        '\\u00B2', '_', ' '];\r\n\r\n    return ExtendedASCII;\r\n});"]}