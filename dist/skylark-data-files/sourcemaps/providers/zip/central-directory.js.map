{"version":3,"sources":["providers/zip/central-directory.js"],"names":["define","ErrorCodes","FileError","Stats","msdos2date","safeToString","FileHeader","FileData","constructor","zipData","data","this","readUInt32LE","EINVAL","_filename","produceFilename","versionMadeBy","readUInt16LE","versionNeeded","flag","compressionMethod","lastModFileTime","rawLastModFileTime","crc32","compressedSize","uncompressedSize","fileNameLength","extraFieldLength","fileCommentLength","diskNumberStart","internalAttributes","externalAttributes","headerRelativeOffset","useUTF8","replace","fileName","rawFileName","slice","extraField","start","fileComment","rawFileComment","totalSize","isDirectory","charAt","length","isFile","isEncrypted","getFileData","header","getData","decompress","getRawData","getStats","FileType","FILE","Date","now","getTime"],"mappings":"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","file":"../../../providers/zip/central-directory.js","sourcesContent":["define([\r\n    '../../error-codes',\r\n    '../../file-error',\r\n    '../../stats',\r\n    \"./msdos2date\",\r\n    \"./safe-to-string\",\r\n    \"./file-header\",\r\n    \"./file-data\"\r\n], function (ErrorCodes, FileError, Stats, msdos2date,safeToString,FileHeader,FileData) {\r\n    'use strict';\r\n\r\n\r\n\r\n    /**\r\n     * 4.3.12  Central directory structure:\r\n     *\r\n     *  central file header signature   4 bytes  (0x02014b50)\r\n     *  version made by                 2 bytes\r\n     *  version needed to extract       2 bytes\r\n     *  general purpose bit flag        2 bytes\r\n     *  compression method              2 bytes\r\n     *  last mod file time              2 bytes\r\n     *  last mod file date              2 bytes\r\n     *  crc-32                          4 bytes\r\n     *  compressed size                 4 bytes\r\n     *  uncompressed size               4 bytes\r\n     *  file name length                2 bytes\r\n     *  extra field length              2 bytes\r\n     *  file comment length             2 bytes\r\n     *  disk number start               2 bytes\r\n     *  internal file attributes        2 bytes\r\n     *  external file attributes        4 bytes\r\n     *  relative offset of local header 4 bytes\r\n     *\r\n     *  file name (variable size)\r\n     *  extra field (variable size)\r\n     *  file comment (variable size)\r\n     */\r\n    class CentralDirectory {\r\n        constructor(zipData, data) {\r\n            this.zipData = zipData;\r\n            this.data = data;\r\n            // Sanity check.\r\n            if (this.data.readUInt32LE(0) !== 0x02014b50) {\r\n                throw new FileError(ErrorCodes.EINVAL, `Invalid Zip file: Central directory record has invalid signature: ${this.data.readUInt32LE(0)}`);\r\n            }\r\n            this._filename = this.produceFilename();\r\n        }\r\n        versionMadeBy() { return this.data.readUInt16LE(4); }\r\n        versionNeeded() { return this.data.readUInt16LE(6); }\r\n        flag() { return this.data.readUInt16LE(8); }\r\n        compressionMethod() { return this.data.readUInt16LE(10); }\r\n        lastModFileTime() {\r\n            // Time and date is in MS-DOS format.\r\n            return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));\r\n        }\r\n        rawLastModFileTime() {\r\n            return this.data.readUInt32LE(12);\r\n        }\r\n        crc32() { return this.data.readUInt32LE(16); }\r\n        compressedSize() { return this.data.readUInt32LE(20); }\r\n        uncompressedSize() { return this.data.readUInt32LE(24); }\r\n        fileNameLength() { return this.data.readUInt16LE(28); }\r\n        extraFieldLength() { return this.data.readUInt16LE(30); }\r\n        fileCommentLength() { return this.data.readUInt16LE(32); }\r\n        diskNumberStart() { return this.data.readUInt16LE(34); }\r\n        internalAttributes() { return this.data.readUInt16LE(36); }\r\n        externalAttributes() { return this.data.readUInt32LE(38); }\r\n        headerRelativeOffset() { return this.data.readUInt32LE(42); }\r\n        produceFilename() {\r\n            /*\r\n              4.4.17.1 claims:\r\n              * All slashes are forward ('/') slashes.\r\n              * Filename doesn't begin with a slash.\r\n              * No drive letters or any nonsense like that.\r\n              * If filename is missing, the input came from standard input.\r\n        \r\n              Unfortunately, this isn't true in practice. Some Windows zip utilities use\r\n              a backslash here, but the correct Unix-style path in file headers.\r\n        \r\n              To avoid seeking all over the file to recover the known-good filenames\r\n              from file headers, we simply convert '/' to '\\' here.\r\n            */\r\n            const fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());\r\n            return fileName.replace(/\\\\/g, \"/\");\r\n        }\r\n        fileName() {\r\n            return this._filename;\r\n        }\r\n        rawFileName() {\r\n            return this.data.slice(46, 46 + this.fileNameLength());\r\n        }\r\n        extraField() {\r\n            const start = 44 + this.fileNameLength();\r\n            return this.data.slice(start, start + this.extraFieldLength());\r\n        }\r\n        fileComment() {\r\n            const start = 46 + this.fileNameLength() + this.extraFieldLength();\r\n            return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());\r\n        }\r\n        rawFileComment() {\r\n            const start = 46 + this.fileNameLength() + this.extraFieldLength();\r\n            return this.data.slice(start, start + this.fileCommentLength());\r\n        }\r\n        totalSize() {\r\n            return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();\r\n        }\r\n        isDirectory() {\r\n            // NOTE: This assumes that the zip file implementation uses the lower byte\r\n            //       of external attributes for DOS attributes for\r\n            //       backwards-compatibility. This is not mandated, but appears to be\r\n            //       commonplace.\r\n            //       According to the spec, the layout of external attributes is\r\n            //       platform-dependent.\r\n            //       If that fails, we also check if the name of the file ends in '/',\r\n            //       which is what Java's ZipFile implementation does.\r\n            const fileName = this.fileName();\r\n            return (this.externalAttributes() & 0x10 ? true : false) || (fileName.charAt(fileName.length - 1) === '/');\r\n        }\r\n        isFile() { return !this.isDirectory(); }\r\n        useUTF8() { return (this.flag() & 0x800) === 0x800; }\r\n        isEncrypted() { return (this.flag() & 0x1) === 0x1; }\r\n        getFileData() {\r\n            // Need to grab the header before we can figure out where the actual\r\n            // compressed data starts.\r\n            const start = this.headerRelativeOffset();\r\n            const header = new FileHeader(this.zipData.slice(start));\r\n            return new FileData(header, this, this.zipData.slice(start + header.totalSize()));\r\n        }\r\n        getData() {\r\n            return this.getFileData().decompress();\r\n        }\r\n        getRawData() {\r\n            return this.getFileData().getRawData();\r\n        }\r\n        getStats() {\r\n            return new Stats(FileType.FILE, this.uncompressedSize(), 0x16D, Date.now(), this.lastModFileTime().getTime());\r\n        }\r\n    }\r\n\r\n\r\n    return CentralDirectory;\r\n\r\n});"]}