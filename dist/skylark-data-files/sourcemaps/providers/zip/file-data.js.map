{"version":3,"sources":["providers/zip/file-data.js"],"names":["define","ErrorCodes","FileError","CompressionMethod","decompressionMethods","constructor","header","record","data","this","decompress","compressionMethod","fcn","compressedSize","uncompressedSize","flag","let","name","EINVAL","fileName","getHeader","getRecord","getRawData","RegisterDecompressionMethod","m"],"mappings":";;;;;;;AAAAA,OAAO,CACH,oBACA,mBACA,wBACD,SAAUC,EAAYC,EAAUC,GAC/B,aAMA,MAAMC,EAAuB,GAoD7B,aAnCIC,YAAYC,EAAQC,EAAQC,GACxBC,KAAKH,OAASA,EACdG,KAAKF,OAASA,EACdE,KAAKD,KAAOA,CAChB,CACAE,aAEI,IAAMC,EAAoBF,KAAKH,OAAOK,kBAAkB,EAClDC,EAAMR,EAAqBO,GACjC,GAAIC,EACA,OAAOA,EAAIH,KAAKD,KAAMC,KAAKF,OAAOM,eAAe,EAAGJ,KAAKF,OAAOO,iBAAiB,EAAGL,KAAKF,OAAOQ,KAAK,CAAC,EAErG,CACDC,IAAIC,EAAOd,EAAkBQ,GAI7B,MAHKM,EAAAA,GACM,YAAYN,EAEjB,IAAIT,EAAUD,EAAWiB,8CAA+CT,KAAKH,OAAOa,SAAS,OAAOF,CAAM,CACpH,CACJ,CACAG,YACI,OAAOX,KAAKH,MAChB,CACAe,YACI,OAAOZ,KAAKF,MAChB,CACAe,aACI,OAAOb,KAAKD,IAChB,CACAe,mCAAmCC,EAAGZ,GAClCR,EAAqBoB,GAAKZ,CAC9B,CACJ,CAKJ,CAAC","file":"../../../providers/zip/file-data.js","sourcesContent":["define([\r\n    '../../error-codes',\r\n    '../../file-error',\r\n    \"./compression-method\",\r\n], function (ErrorCodes, FileError,CompressionMethod) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Maps CompressionMethod => function that decompresses.\r\n     * @hidden\r\n     */\r\n    const decompressionMethods = {};\r\n\r\n    /**\r\n     * 4.3.8  File data\r\n     *\r\n     *   Immediately following the local header for a file\r\n     *   SHOULD be placed the compressed or stored data for the file.\r\n     *   If the file is encrypted, the encryption header for the file\r\n     *   SHOULD be placed after the local header and before the file\r\n     *   data. The series of [local file header][encryption header]\r\n     *   [file data][data descriptor] repeats for each file in the\r\n     *   .ZIP archive.\r\n     *\r\n     *   Zero-byte files, directories, and other file types that\r\n     *   contain no content MUST not include file data.\r\n     */\r\n    class FileData {\r\n        constructor(header, record, data) {\r\n            this.header = header;\r\n            this.record = record;\r\n            this.data = data;\r\n        }\r\n        decompress() {\r\n            // Check the compression\r\n            const compressionMethod = this.header.compressionMethod();\r\n            const fcn = decompressionMethods[compressionMethod];\r\n            if (fcn) {\r\n                return fcn(this.data, this.record.compressedSize(), this.record.uncompressedSize(), this.record.flag());\r\n            }\r\n            else {\r\n                let name = CompressionMethod[compressionMethod];\r\n                if (!name) {\r\n                    name = `Unknown: ${compressionMethod}`;\r\n                }\r\n                throw new FileError(ErrorCodes.EINVAL, `Invalid compression method on file '${this.header.fileName()}': ${name}`);\r\n            }\r\n        }\r\n        getHeader() {\r\n            return this.header;\r\n        }\r\n        getRecord() {\r\n            return this.record;\r\n        }\r\n        getRawData() {\r\n            return this.data;\r\n        }\r\n        static RegisterDecompressionMethod(m, fcn) {\r\n            decompressionMethods[m] = fcn;\r\n        }\r\n    }\r\n\r\n\r\n    return FileData;\r\n\r\n});"]}