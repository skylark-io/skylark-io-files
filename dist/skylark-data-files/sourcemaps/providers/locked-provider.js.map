{"version":3,"sources":["providers/locked-provider.js"],"names":["define","files","Mutex","providers","LockedProvider","constructor","fs","this","_fs","_mu","getName","getFSUnlocked","diskSpace","p","cb","isReadOnly","supportsLinks","supportsProps","supportsSynch","rename","oldPath","newPath","lock","unlock","err","renameSync","isLocked","Error","stat","isLstat","statSync","open","flag","mode","fd","openSync","unlink","unlinkSync","rmdir","rmdirSync","mkdir","mkdirSync","readdir","readdirSync","exists","existsSync","realpath","cache","resolvedPath","realpathSync","truncate","len","truncateSync","readFile","fname","encoding","data","readFileSync","writeFile","writeFileSync","appendFile","appendFileSync","chmod","isLchmod","chmodSync","chown","isLchown","uid","gid","chownSync","utimes","atime","mtime","utimesSync","link","srcpath","dstpath","linkSync","symlink","type","symlinkSync","readlink","linkString","readlinkSync"],"mappings":"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","file":"../../providers/locked-provider.js","sourcesContent":["define([\r\n    \"../files\",\r\n    './mutex'\r\n], function (files,Mutex) {\r\n    'use strict';\r\n    /**\r\n     * This class serializes access to an underlying async filesystem.\r\n     * For example, on an OverlayFS instance with an async lower\r\n     * directory operations like rename and rmdir may involve multiple\r\n     * requests involving both the upper and lower filesystems -- they\r\n     * are not executed in a single atomic step.  OverlayFS uses this\r\n     * LockedProvider to avoid having to reason about the correctness of\r\n     * multiple requests interleaving.\r\n     */\r\n    class LockedProvider {\r\n        constructor(fs) {\r\n            this._fs = fs;\r\n            this._mu = new Mutex();\r\n        }\r\n        getName() {\r\n            return 'LockedProvider<' + this._fs.getName() + '>';\r\n        }\r\n        getFSUnlocked() {\r\n            return this._fs;\r\n        }\r\n        diskSpace(p, cb) {\r\n            // FIXME: should this lock?\r\n            this._fs.diskSpace(p, cb);\r\n        }\r\n        isReadOnly() {\r\n            return this._fs.isReadOnly();\r\n        }\r\n        supportsLinks() {\r\n            return this._fs.supportsLinks();\r\n        }\r\n        supportsProps() {\r\n            return this._fs.supportsProps();\r\n        }\r\n        supportsSynch() {\r\n            return this._fs.supportsSynch();\r\n        }\r\n        rename(oldPath, newPath, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.rename(oldPath, newPath, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        renameSync(oldPath, newPath) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.renameSync(oldPath, newPath);\r\n        }\r\n        stat(p, isLstat, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.stat(p, isLstat, (err, stat) => {\r\n                    this._mu.unlock();\r\n                    cb(err, stat);\r\n                });\r\n            });\r\n        }\r\n        statSync(p, isLstat) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.statSync(p, isLstat);\r\n        }\r\n        open(p, flag, mode, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.open(p, flag, mode, (err, fd) => {\r\n                    this._mu.unlock();\r\n                    cb(err, fd);\r\n                });\r\n            });\r\n        }\r\n        openSync(p, flag, mode) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.openSync(p, flag, mode);\r\n        }\r\n        unlink(p, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.unlink(p, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        unlinkSync(p) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.unlinkSync(p);\r\n        }\r\n        rmdir(p, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.rmdir(p, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        rmdirSync(p) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.rmdirSync(p);\r\n        }\r\n        mkdir(p, mode, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.mkdir(p, mode, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        mkdirSync(p, mode) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.mkdirSync(p, mode);\r\n        }\r\n        readdir(p, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.readdir(p, (err, files) => {\r\n                    this._mu.unlock();\r\n                    cb(err, files);\r\n                });\r\n            });\r\n        }\r\n        readdirSync(p) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.readdirSync(p);\r\n        }\r\n        exists(p, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.exists(p, (exists) => {\r\n                    this._mu.unlock();\r\n                    cb(exists);\r\n                });\r\n            });\r\n        }\r\n        existsSync(p) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.existsSync(p);\r\n        }\r\n        realpath(p, cache, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.realpath(p, cache, (err, resolvedPath) => {\r\n                    this._mu.unlock();\r\n                    cb(err, resolvedPath);\r\n                });\r\n            });\r\n        }\r\n        realpathSync(p, cache) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.realpathSync(p, cache);\r\n        }\r\n        truncate(p, len, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.truncate(p, len, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        truncateSync(p, len) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.truncateSync(p, len);\r\n        }\r\n        readFile(fname, encoding, flag, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.readFile(fname, encoding, flag, (err, data) => {\r\n                    this._mu.unlock();\r\n                    cb(err, data);\r\n                });\r\n            });\r\n        }\r\n        readFileSync(fname, encoding, flag) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.readFileSync(fname, encoding, flag);\r\n        }\r\n        writeFile(fname, data, encoding, flag, mode, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.writeFile(fname, data, encoding, flag, mode, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        writeFileSync(fname, data, encoding, flag, mode) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.writeFileSync(fname, data, encoding, flag, mode);\r\n        }\r\n        appendFile(fname, data, encoding, flag, mode, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.appendFile(fname, data, encoding, flag, mode, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        appendFileSync(fname, data, encoding, flag, mode) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.appendFileSync(fname, data, encoding, flag, mode);\r\n        }\r\n        chmod(p, isLchmod, mode, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.chmod(p, isLchmod, mode, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        chmodSync(p, isLchmod, mode) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.chmodSync(p, isLchmod, mode);\r\n        }\r\n        chown(p, isLchown, uid, gid, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.chown(p, isLchown, uid, gid, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        chownSync(p, isLchown, uid, gid) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.chownSync(p, isLchown, uid, gid);\r\n        }\r\n        utimes(p, atime, mtime, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.utimes(p, atime, mtime, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        utimesSync(p, atime, mtime) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.utimesSync(p, atime, mtime);\r\n        }\r\n        link(srcpath, dstpath, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.link(srcpath, dstpath, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        linkSync(srcpath, dstpath) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.linkSync(srcpath, dstpath);\r\n        }\r\n        symlink(srcpath, dstpath, type, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.symlink(srcpath, dstpath, type, (err) => {\r\n                    this._mu.unlock();\r\n                    cb(err);\r\n                });\r\n            });\r\n        }\r\n        symlinkSync(srcpath, dstpath, type) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.symlinkSync(srcpath, dstpath, type);\r\n        }\r\n        readlink(p, cb) {\r\n            this._mu.lock(() => {\r\n                this._fs.readlink(p, (err, linkString) => {\r\n                    this._mu.unlock();\r\n                    cb(err, linkString);\r\n                });\r\n            });\r\n        }\r\n        readlinkSync(p) {\r\n            if (this._mu.isLocked()) {\r\n                throw new Error('invalid sync call');\r\n            }\r\n            return this._fs.readlinkSync(p);\r\n        }\r\n    }\r\n\r\n    return files.providers.LockedProvider = LockedProvider;\r\n});"]}