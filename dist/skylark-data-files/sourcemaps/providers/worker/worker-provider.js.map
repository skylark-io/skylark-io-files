{"version":3,"sources":["providers/worker/worker-provider.js"],"names":["define","Buffer","paths","BaseProvider","Stats","FileType","FileError","ErrorCodes","FileFlag","ActionType","BaseFile","utils","PreloadFile","CallbackArgumentConverter","WorkerFile","emptyBuffer","WorkerProvider","constructor","worker","super","this","_callbackConverter","_isInitialized","_isReadOnly","_supportLinks","_supportProps","_worker","addEventListener","resp","e","data","isAPIResponse","let","i","args","fixedArgs","Array","length","_argRemote2Local","toLocalArg","cbId","apply","Create","opts","cb","fs","_initialize","isAvailable","attachRemoteListener","fdConverter","FileDescriptorArgumentConverter","argRemote2Local","arg","fixedRequestArgs","specialArg","type","SpecialArgType","CB","id","arguments","message","countdown","requestArgs","err","fixedArg","browserfsMessage","FileErrorLocal2Remote","postMessage","statsLocal2Remote","toRemoteArg","fileFlagLocal2Remote","bufferLocal2Remote","Error","errorLocal2Remote","API_ERROR","FileErrorRemote2Local","STATS","statsRemote2Local","FILEFLAG","fileFlagRemote2Local","BUFFER","bufferRemote2Local","ERROR","errorRemote2Local","request","isAPIRequest","method","remoteCb","applyFdAPIRequest","response","rootFs","getRootFS","probeResponse","PROBE","isReadOnly","supportsLinks","supportsProps","rootFS","getName","Name","supportsSynch","rename","oldPath","newPath","_rpc","stat","p","isLstat","open","flag","mode","unlink","rmdir","mkdir","readdir","exists","realpath","cache","truncate","len","readFile","fname","encoding","writeFile","appendFile","chmod","isLchmod","chown","isLchown","uid","gid","utimes","atime","mtime","link","srcpath","dstpath","symlink","readlink","syncClose","fd","_argLocal2Remote","misc","FD","fdArg","path","getFileFlag","fromBuffer","transferrableObjectToBuffer","methodName","Options","description","validator","v","EINVAL"],"mappings":"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","file":"../../../providers/worker/worker-provider.js","sourcesContent":["define([\r\n    \"skylark-langx-binary/buffer\",\r\n    \"skylark-langx-paths\",\r\n    \"../base-provider\",\r\n    '../../stats',\r\n    '../../file-type',\r\n    '../../file-error',\r\n    '../../error-codes',\r\n    \"../../file-flag\",\r\n    \"../../action-type\",\r\n    \"../../base-file\",\r\n    \"../../utils\",\r\n    \"../preload-file\",\r\n    \"./callback-argument-converter\",\r\n    \"./worker-file\"\r\n], function (\r\n    Buffer,\r\n    paths, \r\n    BaseProvider, \r\n    Stats,\r\n    FileType,\r\n    FileError, \r\n    ErrorCodes, \r\n    FileFlag,\r\n    ActionType,\r\n    BaseFile,\r\n    utils,\r\n    PreloadFile,\r\n    CallbackArgumentConverter,\r\n    WorkerFile\r\n) {\r\n\r\n\r\n    const { buffer2ArrayBuffer, arrayBuffer2Buffer, emptyBuffer }  = utils;\r\n\r\n\r\n\r\n    /**\r\n     * WorkerProvider lets you access a BrowserFS instance that is running in a different\r\n     * JavaScript context (e.g. access BrowserFS in one of your WebWorkers, or\r\n     * access BrowserFS running on the main page from a WebWorker).\r\n     *\r\n     * For example, to have a WebWorker access files in the main browser thread,\r\n     * do the following:\r\n     *\r\n     * MAIN BROWSER THREAD:\r\n     *\r\n     * ```javascript\r\n     *   // Listen for remote file system requests.\r\n     *   BrowserFS.Provider.WorkerProvider.attachRemoteListener(webWorkerObject);\r\n     * ```\r\n     *\r\n     * WEBWORKER THREAD:\r\n     *\r\n     * ```javascript\r\n     *   // Set the remote file system as the root file system.\r\n     *   BrowserFS.configure({ fs: \"WorkerProvider\", options: { worker: self }}, function(e) {\r\n     *     // Ready!\r\n     *   });\r\n     * ```\r\n     *\r\n     * Note that synchronous operations are not permitted on the WorkerProvider, regardless\r\n     * of the configuration option of the remote FS.\r\n     */\r\n    class WorkerProvider extends BaseProvider {\r\n        /**\r\n         * Constructs a new WorkerProvider instance that connects with BrowserFS running on\r\n         * the specified worker.\r\n         */\r\n        constructor(worker) {\r\n            super();\r\n            this._callbackConverter = new CallbackArgumentConverter();\r\n            this._isInitialized = false;\r\n            this._isReadOnly = false;\r\n            this._supportLinks = false;\r\n            this._supportProps = false;\r\n            this._worker = worker;\r\n            this._worker.addEventListener('message', (e) => {\r\n                const resp = e.data;\r\n                if (isAPIResponse(resp)) {\r\n                    let i;\r\n                    const args = resp.args;\r\n                    const fixedArgs = new Array(args.length);\r\n                    // Dispatch event to correct id.\r\n                    for (i = 0; i < fixedArgs.length; i++) {\r\n                        fixedArgs[i] = this._argRemote2Local(args[i]);\r\n                    }\r\n                    this._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);\r\n                }\r\n            });\r\n        }\r\n        static Create(opts, cb) {\r\n            const fs = new WorkerProvider(opts.worker);\r\n            fs._initialize(() => {\r\n                cb(null, fs);\r\n            });\r\n        }\r\n        static isAvailable() {\r\n            return typeof (importScripts) !== 'undefined' || typeof (Worker) !== 'undefined';\r\n        }\r\n        /**\r\n         * Attaches a listener to the remote worker for file system requests.\r\n         */\r\n        static attachRemoteListener(worker) {\r\n            const fdConverter = new FileDescriptorArgumentConverter();\r\n            function argLocal2Remote(arg, requestArgs, cb) {\r\n                switch (typeof arg) {\r\n                    case 'object':\r\n                        if (arg instanceof Stats) {\r\n                            cb(null, statsLocal2Remote(arg));\r\n                        }\r\n                        else if (arg instanceof FileError) {\r\n                            cb(null, FileErrorLocal2Remote(arg));\r\n                        }\r\n                        else if (arg instanceof BaseFile) {\r\n                            // Pass in p and flags from original request.\r\n                            cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));\r\n                        }\r\n                        else if (arg instanceof FileFlag) {\r\n                            cb(null, fileFlagLocal2Remote(arg));\r\n                        }\r\n                        else if (arg instanceof Buffer) {\r\n                            cb(null, bufferLocal2Remote(arg));\r\n                        }\r\n                        else if (arg instanceof Error) {\r\n                            cb(null, errorLocal2Remote(arg));\r\n                        }\r\n                        else {\r\n                            cb(null, arg);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        cb(null, arg);\r\n                        break;\r\n                }\r\n            }\r\n            function argRemote2Local(arg, fixedRequestArgs) {\r\n                if (!arg) {\r\n                    return arg;\r\n                }\r\n                switch (typeof arg) {\r\n                    case 'object':\r\n                        if (typeof arg['type'] === 'number') {\r\n                            const specialArg = arg;\r\n                            switch (specialArg.type) {\r\n                                case SpecialArgType.CB:\r\n                                    const cbId = arg.id;\r\n                                    return function () {\r\n                                        let i;\r\n                                        const fixedArgs = new Array(arguments.length);\r\n                                        let message, countdown = arguments.length;\r\n                                        function abortAndSendError(err) {\r\n                                            if (countdown > 0) {\r\n                                                countdown = -1;\r\n                                                message = {\r\n                                                    browserfsMessage: true,\r\n                                                    cbId: cbId,\r\n                                                    args: [FileErrorLocal2Remote(err)]\r\n                                                };\r\n                                                worker.postMessage(message);\r\n                                            }\r\n                                        }\r\n                                        for (i = 0; i < arguments.length; i++) {\r\n                                            // Capture i and argument.\r\n                                            ((i, arg) => {\r\n                                                argLocal2Remote(arg, fixedRequestArgs, (err, fixedArg) => {\r\n                                                    fixedArgs[i] = fixedArg;\r\n                                                    if (err) {\r\n                                                        abortAndSendError(err);\r\n                                                    }\r\n                                                    else if (--countdown === 0) {\r\n                                                        message = {\r\n                                                            browserfsMessage: true,\r\n                                                            cbId: cbId,\r\n                                                            args: fixedArgs\r\n                                                        };\r\n                                                        worker.postMessage(message);\r\n                                                    }\r\n                                                });\r\n                                            })(i, arguments[i]);\r\n                                        }\r\n                                        if (arguments.length === 0) {\r\n                                            message = {\r\n                                                browserfsMessage: true,\r\n                                                cbId: cbId,\r\n                                                args: fixedArgs\r\n                                            };\r\n                                            worker.postMessage(message);\r\n                                        }\r\n                                    };\r\n                                case SpecialArgType.API_ERROR:\r\n                                    return FileErrorRemote2Local(specialArg);\r\n                                case SpecialArgType.STATS:\r\n                                    return statsRemote2Local(specialArg);\r\n                                case SpecialArgType.FILEFLAG:\r\n                                    return fileFlagRemote2Local(specialArg);\r\n                                case SpecialArgType.BUFFER:\r\n                                    return bufferRemote2Local(specialArg);\r\n                                case SpecialArgType.ERROR:\r\n                                    return errorRemote2Local(specialArg);\r\n                                default:\r\n                                    // No idea what this is.\r\n                                    return arg;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return arg;\r\n                        }\r\n                    default:\r\n                        return arg;\r\n                }\r\n            }\r\n            worker.addEventListener('message', (e) => {\r\n                const request = e.data;\r\n                if (isAPIRequest(request)) {\r\n                    const args = request.args, fixedArgs = new Array(args.length);\r\n                    switch (request.method) {\r\n                        case 'close':\r\n                        case 'sync':\r\n                            (() => {\r\n                                // File descriptor-relative methods.\r\n                                const remoteCb = args[1];\r\n                                fdConverter.applyFdAPIRequest(request, (err) => {\r\n                                    // Send response.\r\n                                    const response = {\r\n                                        browserfsMessage: true,\r\n                                        cbId: remoteCb.id,\r\n                                        args: err ? [FileErrorLocal2Remote(err)] : []\r\n                                    };\r\n                                    worker.postMessage(response);\r\n                                });\r\n                            })();\r\n                            break;\r\n                        case 'probe':\r\n                            (() => {\r\n                                const rootFs = fs.getRootFS(), remoteCb = args[1], probeResponse = {\r\n                                    type: SpecialArgType.PROBE,\r\n                                    isReadOnly: rootFs.isReadOnly(),\r\n                                    supportsLinks: rootFs.supportsLinks(),\r\n                                    supportsProps: rootFs.supportsProps()\r\n                                }, response = {\r\n                                    browserfsMessage: true,\r\n                                    cbId: remoteCb.id,\r\n                                    args: [probeResponse]\r\n                                };\r\n                                worker.postMessage(response);\r\n                            })();\r\n                            break;\r\n                        default:\r\n                            // File system methods.\r\n                            for (let i = 0; i < args.length; i++) {\r\n                                fixedArgs[i] = argRemote2Local(args[i], fixedArgs);\r\n                            }\r\n                            const rootFS = fs.getRootFS();\r\n                            rootFS[request.method].apply(rootFS, fixedArgs);\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        getName() {\r\n            return WorkerProvider.Name;\r\n        }\r\n        isReadOnly() { return this._isReadOnly; }\r\n        supportsSynch() { return false; }\r\n        supportsLinks() { return this._supportLinks; }\r\n        supportsProps() { return this._supportProps; }\r\n        rename(oldPath, newPath, cb) {\r\n            this._rpc('rename', arguments);\r\n        }\r\n        stat(p, isLstat, cb) {\r\n            this._rpc('stat', arguments);\r\n        }\r\n        open(p, flag, mode, cb) {\r\n            this._rpc('open', arguments);\r\n        }\r\n        unlink(p, cb) {\r\n            this._rpc('unlink', arguments);\r\n        }\r\n        rmdir(p, cb) {\r\n            this._rpc('rmdir', arguments);\r\n        }\r\n        mkdir(p, mode, cb) {\r\n            this._rpc('mkdir', arguments);\r\n        }\r\n        readdir(p, cb) {\r\n            this._rpc('readdir', arguments);\r\n        }\r\n        exists(p, cb) {\r\n            this._rpc('exists', arguments);\r\n        }\r\n        realpath(p, cache, cb) {\r\n            this._rpc('realpath', arguments);\r\n        }\r\n        truncate(p, len, cb) {\r\n            this._rpc('truncate', arguments);\r\n        }\r\n        readFile(fname, encoding, flag, cb) {\r\n            this._rpc('readFile', arguments);\r\n        }\r\n        writeFile(fname, data, encoding, flag, mode, cb) {\r\n            this._rpc('writeFile', arguments);\r\n        }\r\n        appendFile(fname, data, encoding, flag, mode, cb) {\r\n            this._rpc('appendFile', arguments);\r\n        }\r\n        chmod(p, isLchmod, mode, cb) {\r\n            this._rpc('chmod', arguments);\r\n        }\r\n        chown(p, isLchown, uid, gid, cb) {\r\n            this._rpc('chown', arguments);\r\n        }\r\n        utimes(p, atime, mtime, cb) {\r\n            this._rpc('utimes', arguments);\r\n        }\r\n        link(srcpath, dstpath, cb) {\r\n            this._rpc('link', arguments);\r\n        }\r\n        symlink(srcpath, dstpath, type, cb) {\r\n            this._rpc('symlink', arguments);\r\n        }\r\n        readlink(p, cb) {\r\n            this._rpc('readlink', arguments);\r\n        }\r\n        syncClose(method, fd, cb) {\r\n            this._worker.postMessage({\r\n                browserfsMessage: true,\r\n                method: method,\r\n                args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]\r\n            });\r\n        }\r\n        /**\r\n         * Called once both local and remote sides are set up.\r\n         */\r\n        _initialize(cb) {\r\n            if (!this._isInitialized) {\r\n                const message = {\r\n                    browserfsMessage: true,\r\n                    method: 'probe',\r\n                    args: [this._argLocal2Remote(emptyBuffer()), this._callbackConverter.toRemoteArg((probeResponse) => {\r\n                            this._isInitialized = true;\r\n                            this._isReadOnly = probeResponse.isReadOnly;\r\n                            this._supportLinks = probeResponse.supportsLinks;\r\n                            this._supportProps = probeResponse.supportsProps;\r\n                            cb();\r\n                        })]\r\n                };\r\n                this._worker.postMessage(message);\r\n            }\r\n            else {\r\n                cb();\r\n            }\r\n        }\r\n        _argRemote2Local(arg) {\r\n            if (!arg) {\r\n                return arg;\r\n            }\r\n            switch (typeof arg) {\r\n                case 'object':\r\n                    if (typeof arg['type'] === 'number') {\r\n                        const specialArg = arg;\r\n                        switch (specialArg.type) {\r\n                            case SpecialArgType.API_ERROR:\r\n                                return misc.FileErrorRemote2Local(specialArg);\r\n                            case SpecialArgType.FD:\r\n                                const fdArg = specialArg;\r\n                                return new WorkerFile(this, fdArg.path, FileFlag.getFileFlag(fdArg.flag), Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)), fdArg.id, transferrableObjectToBuffer(fdArg.data));\r\n                            case SpecialArgType.STATS:\r\n                                return misc.statsRemote2Local(specialArg);\r\n                            case SpecialArgType.FILEFLAG:\r\n                                return misc.fileFlagRemote2Local(specialArg);\r\n                            case SpecialArgType.BUFFER:\r\n                                return misc.bufferRemote2Local(specialArg);\r\n                            case SpecialArgType.ERROR:\r\n                                return misc.errorRemote2Local(specialArg);\r\n                            default:\r\n                                return arg;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return arg;\r\n                    }\r\n                default:\r\n                    return arg;\r\n            }\r\n        }\r\n        _rpc(methodName, args) {\r\n            const fixedArgs = new Array(args.length);\r\n            for (let i = 0; i < args.length; i++) {\r\n                fixedArgs[i] = this._argLocal2Remote(args[i]);\r\n            }\r\n            const message = {\r\n                browserfsMessage: true,\r\n                method: methodName,\r\n                args: fixedArgs\r\n            };\r\n            this._worker.postMessage(message);\r\n        }\r\n        /**\r\n         * Converts a local argument into a remote argument. Public so WorkerFile objects can call it.\r\n         */\r\n        _argLocal2Remote(arg) {\r\n            if (!arg) {\r\n                return arg;\r\n            }\r\n            switch (typeof arg) {\r\n                case \"object\":\r\n                    if (arg instanceof Stats) {\r\n                        return statsLocal2Remote(arg);\r\n                    }\r\n                    else if (arg instanceof FileError) {\r\n                        return FileErrorLocal2Remote(arg);\r\n                    }\r\n                    else if (arg instanceof WorkerFile) {\r\n                        return arg.toRemoteArg();\r\n                    }\r\n                    else if (arg instanceof FileFlag) {\r\n                        return fileFlagLocal2Remote(arg);\r\n                    }\r\n                    else if (arg instanceof Buffer) {\r\n                        return bufferLocal2Remote(arg);\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return errorLocal2Remote(arg);\r\n                    }\r\n                    else {\r\n                        return \"Unknown argument\";\r\n                    }\r\n                case \"function\":\r\n                    return this._callbackConverter.toRemoteArg(arg);\r\n                default:\r\n                    return arg;\r\n            }\r\n        }\r\n    }\r\n    WorkerProvider.Name = \"WorkerProvider\";\r\n    WorkerProvider.Options = {\r\n        worker: {\r\n            type: \"object\",\r\n            description: \"The target worker that you want to connect to, or the current worker if in a worker context.\",\r\n            validator: function (v, cb) {\r\n                // Check for a `postMessage` function.\r\n                if (v['postMessage']) {\r\n                    cb();\r\n                }\r\n                else {\r\n                    cb(new FileError(ErrorCodes.EINVAL, `option must be a Web Worker instance.`));\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return WorkerProvider;\r\n});"]}