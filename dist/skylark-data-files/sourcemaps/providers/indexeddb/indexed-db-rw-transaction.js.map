{"version":3,"sources":["providers/indexeddb/indexed-db-rw-transaction.js"],"names":["define","FileError","ErrorCodes","AsyncKeyValueProvider","utils","IndexedDBROTransaction","buffer2ArrayBuffer","window","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","convertError","e","message","toString","name","ENOENT","ENOSPC","EIO","onErrorHandler","cb","code","preventDefault","undefined","IndexedDBRWTransaction","constructor","tx","store","super","put","key","data","overwrite","arraybuffer","r","this","add","onerror","onsuccess","del","commit","setTimeout","abort","let","_e"],"mappings":";;;;;;;AAAAA,OAAO,CACH,mBACA,oBACA,8BACA,cACA,+BACD,SAAUC,EAAUC,EAAYC,EAAwBC,EAAMC,GAC7D,aAGA,MAA4BC,EAAwBF,EAAxBE,sBAMVC,OAAOC,WACrBD,OAAOE,cACPF,OAAOG,iBACPH,OAAOI,YAMX,SAASC,EAAaC,EAAGC,EAAUD,EAAEE,SAAS,GAC1C,OAAQF,EAAEG,MACN,IAAK,gBACD,OAAO,IAAIf,EAAUC,EAAWe,OAAQH,CAAO,EACnD,IAAK,qBACD,OAAO,IAAIb,EAAUC,EAAWgB,OAAQJ,CAAO,EACnD,QAEI,OAAO,IAAIb,EAAUC,EAAWiB,IAAKL,CAAO,CACpD,CACJ,CAOA,SAASM,EAAeC,EAAIC,EAAOpB,EAAWiB,IAAKL,EAAU,MACzD,OAAO,SAAUD,GAEbA,EAAEU,eAAe,EACjBF,EAAG,IAAIpB,EAAUqB,EAAkB,OAAZR,EAAmBA,EAAUU,KAAAA,CAAS,CAAC,CAClE,CACJ,OAKMC,UAA+BpB,EACjCqB,YAAYC,EAAIC,GACZC,MAAMF,EAAIC,CAAK,CACnB,CACAE,IAAIC,EAAKC,EAAMC,EAAWZ,GACtB,IACI,IAAMa,EAAc5B,EAAmB0B,CAAI,EAG3CG,EAAIF,EAAYG,KAAKR,MAAME,IAAII,EAAaH,CAAG,EAAIK,KAAKR,MAAMS,IAAIH,EAAaH,CAAG,EAElFI,EAAEG,QAAUlB,EAAeC,CAAE,EAC7Bc,EAAEI,UAAY,IACVlB,EAAG,KAAM,CAAA,CAAI,CACjB,CAIJ,CAFA,MAAOR,GACHQ,EAAGT,EAAaC,CAAC,CAAC,CACtB,CACJ,CACA2B,IAAIT,EAAKV,GACL,IAII,IAAMc,EAAIC,KAAKR,MAAc,OAAEG,CAAG,EAClCI,EAAEG,QAAUlB,EAAeC,CAAE,EAC7Bc,EAAEI,UAAY,IACVlB,EAAG,CACP,CAIJ,CAFA,MAAOR,GACHQ,EAAGT,EAAaC,CAAC,CAAC,CACtB,CACJ,CACA4B,OAAOpB,GAEHqB,WAAWrB,EAAI,CAAC,CACpB,CACAsB,MAAMtB,GACFuB,IAAIC,EAAK,KACT,IACIT,KAAKT,GAAGgB,MAAM,CAOlB,CALA,MAAO9B,GACHgC,EAAKjC,EAAaC,CAAC,CACvB,CACA,QACIQ,EAAGwB,CAAE,CACT,CACJ,CACJ,CAGA,OAAOpB,CACX,CAAC","file":"../../../providers/indexeddb/indexed-db-rw-transaction.js","sourcesContent":["define([\r\n    '../../file-error',\r\n    '../../error-codes',\r\n    '../async-key-value-provider',\r\n    '../../utils',\r\n    \"./indexed-db-ro-transaction\"\r\n], function (FileError,ErrorCodes, AsyncKeyValueProvider,  utils,IndexedDBROTransaction) {\r\n    'use strict';\r\n\r\n\r\n    const { arrayBuffer2Buffer, buffer2ArrayBuffer }  = utils;\r\n\r\n    /**\r\n     * Get the indexedDB constructor for the current browser.\r\n     * @hidden\r\n     */\r\n    const indexedDB = window.indexedDB ||\r\n        window.mozIndexedDB ||\r\n        window.webkitIndexedDB ||\r\n        window.msIndexedDB;\r\n    /**\r\n     * Converts a DOMException or a DOMError from an IndexedDB event into a\r\n     * standardized BrowserFS API error.\r\n     * @hidden\r\n     */\r\n    function convertError(e, message = e.toString()) {\r\n        switch (e.name) {\r\n            case \"NotFoundError\":\r\n                return new FileError(ErrorCodes.ENOENT, message);\r\n            case \"QuotaExceededError\":\r\n                return new FileError(ErrorCodes.ENOSPC, message);\r\n            default:\r\n                // The rest do not seem to map cleanly to standard error codes.\r\n                return new FileError(ErrorCodes.EIO, message);\r\n        }\r\n    }\r\n    /**\r\n     * Produces a new onerror handler for IDB. Our errors are always fatal, so we\r\n     * handle them generically: Call the user-supplied callback with a translated\r\n     * version of the error, and let the error bubble up.\r\n     * @hidden\r\n     */\r\n    function onErrorHandler(cb, code = ErrorCodes.EIO, message = null) {\r\n        return function (e) {\r\n            // Prevent the error from canceling the transaction.\r\n            e.preventDefault();\r\n            cb(new FileError(code, message !== null ? message : undefined));\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    class IndexedDBRWTransaction extends IndexedDBROTransaction {\r\n        constructor(tx, store) {\r\n            super(tx, store);\r\n        }\r\n        put(key, data, overwrite, cb) {\r\n            try {\r\n                const arraybuffer = buffer2ArrayBuffer(data);\r\n                let r;\r\n                // Note: 'add' will never overwrite an existing key.\r\n                r = overwrite ? this.store.put(arraybuffer, key) : this.store.add(arraybuffer, key);\r\n                // XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.\r\n                r.onerror = onErrorHandler(cb);\r\n                r.onsuccess = (event) => {\r\n                    cb(null, true);\r\n                };\r\n            }\r\n            catch (e) {\r\n                cb(convertError(e));\r\n            }\r\n        }\r\n        del(key, cb) {\r\n            try {\r\n                // NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string\r\n                // like this.\r\n                // http://stackoverflow.com/a/26479152\r\n                const r = this.store['delete'](key);\r\n                r.onerror = onErrorHandler(cb);\r\n                r.onsuccess = (event) => {\r\n                    cb();\r\n                };\r\n            }\r\n            catch (e) {\r\n                cb(convertError(e));\r\n            }\r\n        }\r\n        commit(cb) {\r\n            // Return to the event loop to commit the transaction.\r\n            setTimeout(cb, 0);\r\n        }\r\n        abort(cb) {\r\n            let _e = null;\r\n            try {\r\n                this.tx.abort();\r\n            }\r\n            catch (e) {\r\n                _e = convertError(e);\r\n            }\r\n            finally {\r\n                cb(_e);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return IndexedDBRWTransaction;\r\n});"]}