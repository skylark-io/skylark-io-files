{"version":3,"sources":["no-sync-file.js"],"names":["define","files","PreloadFile","NoSyncFile","constructor","_fs","_path","_flag","_stat","contents","super","sync","cb","syncSync","close","closeSync"],"mappings":";;;;;;;AAAAA,OAAO,CACF,UACA,kBACF,SAAUC,EAAMC,GACf,mBAKMC,UAAmBD,EACrBE,YAAYC,EAAKC,EAAOC,EAAOC,EAAOC,GAClCC,MAAML,EAAKC,EAAOC,EAAOC,EAAOC,CAAQ,CAC5C,CAKAE,KAAKC,GACDA,EAAG,CACP,CAIAC,YAOAC,MAAMF,GACFA,EAAG,CACP,CAIAG,aAGJ,CAEA,OAAOd,EAAME,WAAaA,CAE9B,CAAC","file":"../no-sync-file.js","sourcesContent":["define([\r\n     \"./files\",\r\n     \"./preload-file\"\r\n], function (files,PreloadFile) {\r\n    'use strict';\r\n    /**\r\n     * File class for the InMemory and XHR file systems.\r\n     * Doesn't sync to anything, so it works nicely for memory-only files.\r\n     */\r\n    class NoSyncFile extends PreloadFile {\r\n        constructor(_fs, _path, _flag, _stat, contents) {\r\n            super(_fs, _path, _flag, _stat, contents);\r\n        }\r\n        /**\r\n         * Asynchronous sync. Doesn't do anything, simply calls the cb.\r\n         * @param [Function(BrowserFS.FileError)] cb\r\n         */\r\n        sync(cb) {\r\n            cb();\r\n        }\r\n        /**\r\n         * Synchronous sync. Doesn't do anything.\r\n         */\r\n        syncSync() {\r\n            // NOP.\r\n        }\r\n        /**\r\n         * Asynchronous close. Doesn't do anything, simply calls the cb.\r\n         * @param [Function(BrowserFS.FileError)] cb\r\n         */\r\n        close(cb) {\r\n            cb();\r\n        }\r\n        /**\r\n         * Synchronous close. Doesn't do anything.\r\n         */\r\n        closeSync() {\r\n            // NOP.\r\n        }\r\n    }\r\n\r\n    return files.NoSyncFile = NoSyncFile;\r\n    \r\n});"]}