{"version":3,"sources":["file-error.js"],"names":["define","Buffer","files","ErrorCodes","ErrorStrings","FileError","Error","constructor","type","message","path","super","this","syscall","errno","code","stack","fromJSON","json","err","fromBuffer","buffer","i","JSON","parse","toString","readUInt32LE","create","p","ENOENT","EEXIST","EISDIR","ENOTDIR","EPERM","ENOTEMPTY","toJSON","writeToBuffer","alloc","bufferSize","bytesWritten","write","stringify","writeUInt32LE","byteLength"],"mappings":";;;;;;;AAAAA,OAAO,CACH,8BACA,UACA,gBACA,mBACF,SAAUC,EAAOC,EAAMC,EAAWC,GACjC,mBAQOC,UAAkBC,MAWpBC,YAAYC,EAAMC,EAAUL,EAAaI,GAAOE,GAC5CC,MAAMF,CAAO,EAEbG,KAAKC,QAAU,GACfD,KAAKE,MAAQN,EACbI,KAAKG,KAAOZ,EAAWK,GACvBI,KAAKF,KAAOA,EACZE,KAAKI,OAAQ,IAAIV,OAAQU,MACzBJ,KAAKH,kBAAoBG,KAAKG,SAASN,GAAUG,KAAKF,WAAaE,KAAKF,QAAU,GACtF,CACAO,gBAAgBC,GACZ,IAAMC,EAAM,IAAId,EAAU,CAAC,EAM3B,OALAc,EAAIL,MAAQI,EAAKJ,MACjBK,EAAIJ,KAAOG,EAAKH,KAChBI,EAAIT,KAAOQ,EAAKR,KAChBS,EAAIH,MAAQE,EAAKF,MACjBG,EAAIV,QAAUS,EAAKT,QACZU,CACX,CAIAC,kBAAkBC,EAAQC,EAAI,GAC1B,OAAOjB,EAAUY,SAASM,KAAKC,MAAMH,EAAOI,SAAS,OAAQH,EAAI,EAAGA,EAAI,EAAID,EAAOK,aAAaJ,CAAC,CAAC,CAAC,CAAC,CACxG,CACAK,cAAcZ,EAAMa,GAChB,OAAO,IAAIvB,EAAUU,EAAMX,EAAaW,GAAOa,CAAC,CACpD,CACAC,cAAcnB,GACV,OAAOE,KAAKe,OAAOxB,EAAW0B,OAAQnB,CAAI,CAC9C,CACAoB,cAAcpB,GACV,OAAOE,KAAKe,OAAOxB,EAAW2B,OAAQpB,CAAI,CAC9C,CACAqB,cAAcrB,GACV,OAAOE,KAAKe,OAAOxB,EAAW4B,OAAQrB,CAAI,CAC9C,CACAsB,eAAetB,GACX,OAAOE,KAAKe,OAAOxB,EAAW6B,QAAStB,CAAI,CAC/C,CACAuB,aAAavB,GACT,OAAOE,KAAKe,OAAOxB,EAAW8B,MAAOvB,CAAI,CAC7C,CACAwB,iBAAiBxB,GACb,OAAOE,KAAKe,OAAOxB,EAAW+B,UAAWxB,CAAI,CACjD,CAIAe,WACI,OAAOb,KAAKH,OAChB,CACA0B,SACI,MAAO,CACHrB,MAAOF,KAAKE,MACZC,KAAMH,KAAKG,KACXL,KAAME,KAAKF,KACXM,MAAOJ,KAAKI,MACZP,QAASG,KAAKH,OAClB,CACJ,CAIA2B,cAAcf,EAASpB,EAAOoC,MAAMzB,KAAK0B,WAAW,CAAC,EAAGhB,EAAI,GACxD,IAAMiB,EAAelB,EAAOmB,MAAMjB,KAAKkB,UAAU7B,KAAKuB,OAAO,CAAC,EAAGb,EAAI,CAAC,EAEtE,OADAD,EAAOqB,cAAcH,EAAcjB,CAAC,EAC7BD,CACX,CAIAiB,aAEI,OAAO,EAAIrC,EAAO0C,WAAWpB,KAAKkB,UAAU7B,KAAKuB,OAAO,CAAC,CAAC,CAC9D,CACJ,CAEA,OAAOjC,EAAMG,UAAYA,CAE7B,CAAC","file":"../file-error.js","sourcesContent":["define([\r\n    \"skylark-langx-binary/buffer\",\r\n    \"./files\",\r\n    \"./error-codes\",\r\n    \"./error-strings\"\r\n],function (Buffer,files,ErrorCodes,ErrorStrings) {\r\n   'use strict';\r\n   \r\n\r\n    /* tslint:enable:variable-name */\r\n    /**\r\n     * Represents a BrowserFS error. Passed back to applications after a failed\r\n     * call to the BrowserFS API.\r\n     */\r\n    class FileError extends Error {\r\n        /**\r\n         * Represents a BrowserFS error. Passed back to applications after a failed\r\n         * call to the BrowserFS API.\r\n         *\r\n         * Error codes mirror those returned by regular Unix file operations, which is\r\n         * what Node returns.\r\n         * @constructor FileError\r\n         * @param type The type of the error.\r\n         * @param [message] A descriptive error message.\r\n         */\r\n        constructor(type, message = ErrorStrings[type], path) {\r\n            super(message);\r\n            // Unsupported.\r\n            this.syscall = \"\";\r\n            this.errno = type;\r\n            this.code = ErrorCodes[type];\r\n            this.path = path;\r\n            this.stack = new Error().stack;\r\n            this.message = `Error: ${this.code}: ${message}${this.path ? `, '${this.path}'` : ''}`;\r\n        }\r\n        static fromJSON(json) {\r\n            const err = new FileError(0);\r\n            err.errno = json.errno;\r\n            err.code = json.code;\r\n            err.path = json.path;\r\n            err.stack = json.stack;\r\n            err.message = json.message;\r\n            return err;\r\n        }\r\n        /**\r\n         * Creates an FileError object from a buffer.\r\n         */\r\n        static fromBuffer(buffer, i = 0) {\r\n            return FileError.fromJSON(JSON.parse(buffer.toString('utf8', i + 4, i + 4 + buffer.readUInt32LE(i))));\r\n        }\r\n        static create(code, p) {\r\n            return new FileError(code, ErrorStrings[code], p);\r\n        }\r\n        static ENOENT(path) {\r\n            return this.create(ErrorCodes.ENOENT, path);\r\n        }\r\n        static EEXIST(path) {\r\n            return this.create(ErrorCodes.EEXIST, path);\r\n        }\r\n        static EISDIR(path) {\r\n            return this.create(ErrorCodes.EISDIR, path);\r\n        }\r\n        static ENOTDIR(path) {\r\n            return this.create(ErrorCodes.ENOTDIR, path);\r\n        }\r\n        static EPERM(path) {\r\n            return this.create(ErrorCodes.EPERM, path);\r\n        }\r\n        static ENOTEMPTY(path) {\r\n            return this.create(ErrorCodes.ENOTEMPTY, path);\r\n        }\r\n        /**\r\n         * @return A friendly error message.\r\n         */\r\n        toString() {\r\n            return this.message;\r\n        }\r\n        toJSON() {\r\n            return {\r\n                errno: this.errno,\r\n                code: this.code,\r\n                path: this.path,\r\n                stack: this.stack,\r\n                message: this.message\r\n            };\r\n        }\r\n        /**\r\n         * Writes the API error into a buffer.\r\n         */\r\n        writeToBuffer(buffer = Buffer.alloc(this.bufferSize()), i = 0) {\r\n            const bytesWritten = buffer.write(JSON.stringify(this.toJSON()), i + 4);\r\n            buffer.writeUInt32LE(bytesWritten, i);\r\n            return buffer;\r\n        }\r\n        /**\r\n         * The size of the API error in buffer-form in bytes.\r\n         */\r\n        bufferSize() {\r\n            // 4 bytes for string length.\r\n            return 4 + Buffer.byteLength(JSON.stringify(this.toJSON()));\r\n        }\r\n    }\r\n\r\n    return files.FileError = FileError;\r\n\r\n});"]}