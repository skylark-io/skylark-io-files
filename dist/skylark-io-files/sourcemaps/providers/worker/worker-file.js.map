{"version":3,"sources":["providers/worker/worker-file.js"],"names":["define","PreloadFile","SpecialArgType","misc","WorkerFile","constructor","_fs","_path","_flag","_stat","remoteFdId","contents","super","this","_remoteFdId","getRemoteFdId","toRemoteArg","type","FD","id","data","bufferToTransferrableObject","getBuffer","stat","getStats","toBuffer","path","getPath","flag","getFlag","getFlagString","sync","cb","_syncClose","close","isDirty","syncClose","e","resetDirty"],"mappings":";;;;;;;AAAAA,OAAO,CACH,qBACA,qBACA,UACD,SAAUC,EAAYC,EAAeC,SAK9BC,UAAmBH,EACrBI,YAAYC,EAAKC,EAAOC,EAAOC,EAAOC,EAAYC,GAC9CC,MAAMN,EAAKC,EAAOC,EAAOC,EAAOE,CAAQ,EACxCE,KAAKC,YAAcJ,CACvB,CACAK,gBACI,OAAOF,KAAKC,WAChB,CAIAE,cACI,MAAO,CACHC,KAAMf,EAAegB,GACrBC,GAAIN,KAAKC,YACTM,KAAMjB,EAAKkB,4BAA4BR,KAAKS,UAAU,CAAC,EACvDC,KAAMpB,EAAKkB,4BAA4BR,KAAKW,SAAS,EAAEC,SAAS,CAAC,EACjEC,KAAMb,KAAKc,QAAQ,EACnBC,KAAMf,KAAKgB,QAAQ,EAAEC,cAAc,CACvC,CACJ,CACAC,KAAKC,GACDnB,KAAKoB,WAAW,OAAQD,CAAE,CAC9B,CACAE,MAAMF,GACFnB,KAAKoB,WAAW,QAASD,CAAE,CAC/B,CACAC,WAAWhB,EAAMe,GACTnB,KAAKsB,QAAQ,EACbtB,KAAKP,IAAI8B,UAAUnB,EAAMJ,KAAM,IACtBwB,GACDxB,KAAKyB,WAAW,EAEpBN,EAAGK,CAAC,CACR,CAAC,EAGDL,EAAG,CAEX,CACJ,CAGA,OAAO5B,CACX,CAAC","file":"../../../providers/worker/worker-file.js","sourcesContent":["define([\r\n    \"../../preload-file\",\r\n    \"./special-arg-type\",\r\n    \"./misc\"\r\n], function (PreloadFile,SpecialArgType,misc) {\r\n\r\n    /**\r\n     * Represents a remote file in a different worker/thread.\r\n     */\r\n    class WorkerFile extends PreloadFile {\r\n        constructor(_fs, _path, _flag, _stat, remoteFdId, contents) {\r\n            super(_fs, _path, _flag, _stat, contents);\r\n            this._remoteFdId = remoteFdId;\r\n        }\r\n        getRemoteFdId() {\r\n            return this._remoteFdId;\r\n        }\r\n        /**\r\n         * @hidden\r\n         */\r\n        toRemoteArg() {\r\n            return {\r\n                type: SpecialArgType.FD,\r\n                id: this._remoteFdId,\r\n                data: misc.bufferToTransferrableObject(this.getBuffer()),\r\n                stat: misc.bufferToTransferrableObject(this.getStats().toBuffer()),\r\n                path: this.getPath(),\r\n                flag: this.getFlag().getFlagString()\r\n            };\r\n        }\r\n        sync(cb) {\r\n            this._syncClose('sync', cb);\r\n        }\r\n        close(cb) {\r\n            this._syncClose('close', cb);\r\n        }\r\n        _syncClose(type, cb) {\r\n            if (this.isDirty()) {\r\n                this._fs.syncClose(type, this, (e) => {\r\n                    if (!e) {\r\n                        this.resetDirty();\r\n                    }\r\n                    cb(e);\r\n                });\r\n            }\r\n            else {\r\n                cb();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return WorkerFile;\r\n});"]}