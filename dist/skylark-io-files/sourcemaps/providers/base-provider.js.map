{"version":3,"sources":["providers/base-provider.js"],"names":["define","Buffer","paths","files","ErrorCodes","FileError","ActionType","FileFlag","utils","fail","providers","BaseProvider","supportsLinks","diskSpace","p","cb","openFile","flag","ENOTSUP","createFile","mode","open","this","stat","e","stats","pathNotExistsAction","CREATE_FILE","dirname","parentStats","isDirectory","ENOTDIR","THROW_EXCEPTION","ENOENT","EINVAL","EISDIR","pathExistsAction","EEXIST","TRUNCATE_FILE","fd","truncate","sync","NOP","rename","oldPath","newPath","renameSync","isLstat","statSync","openFileSync","createFileSync","openSync","let","unlinkSync","unlink","rmdir","rmdirSync","mkdir","mkdirSync","readdir","readdirSync","exists","err","existsSync","realpath","cache","splitPath","split","sep","i","length","addPaths","slice","join","apply","doesExist","realpathSync","path","len","getFileFlag","er","close","er2","truncateSync","closeSync","readFile","fname","encoding","oldCb","arg","err2","buf","alloc","size","read","toString","readFileSync","readSync","writeFile","data","from","write","writeFileSync","writeSync","appendFile","appendFileSync","chmod","isLchmod","chmodSync","chown","isLchown","uid","gid","chownSync","utimes","atime","mtime","utimesSync","link","srcpath","dstpath","linkSync","symlink","type","symlinkSync","readlink","readlinkSync"],"mappings":"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","file":"../../providers/base-provider.js","sourcesContent":["define([\r\n    \"skylark-langx-binary/buffer\",\r\n    \"skylark-langx-paths\",\r\n    \"../files\",\r\n    \"../error-codes\",\r\n    '../file-error',\r\n    '../action-type',\r\n    '../file-flag',\r\n    '../utils'\r\n], function (Buffer,paths, files,ErrorCodes, FileError, ActionType, FileFlag, utils) {\r\n    'use strict';\r\n\r\n    const { fail } = utils;\r\n\r\n    /**\r\n     * Basic filesystem class. Most filesystems should extend this class, as it\r\n     * provides default implementations for a handful of methods.\r\n     */\r\n    class BaseProvider {\r\n        supportsLinks() {\r\n            return false;\r\n        }\r\n        diskSpace(p, cb) {\r\n            cb(0, 0);\r\n        }\r\n        /**\r\n         * Opens the file at path p with the given flag. The file must exist.\r\n         * @param p The path to open.\r\n         * @param flag The flag to use when opening the file.\r\n         */\r\n        openFile(p, flag, cb) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        /**\r\n         * Create the file at path p with the given mode. Then, open it with the given\r\n         * flag.\r\n         */\r\n        createFile(p, flag, mode, cb) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        open(p, flag, mode, cb) {\r\n            const mustBeFile = (e, stats) => {\r\n                if (e) {\r\n                    // File does not exist.\r\n                    switch (flag.pathNotExistsAction()) {\r\n                        case ActionType.CREATE_FILE:\r\n                            // Ensure parent exists.\r\n                            return this.stat(paths.dirname(p), false, (e, parentStats) => {\r\n                                if (e) {\r\n                                    cb(e);\r\n                                }\r\n                                else if (parentStats && !parentStats.isDirectory()) {\r\n                                    cb(FileError.ENOTDIR(paths.dirname(p)));\r\n                                }\r\n                                else {\r\n                                    this.createFile(p, flag, mode, cb);\r\n                                }\r\n                            });\r\n                        case ActionType.THROW_EXCEPTION:\r\n                            return cb(FileError.ENOENT(p));\r\n                        default:\r\n                            return cb(new FileError(ErrorCodes.EINVAL, 'Invalid FileFlag object.'));\r\n                    }\r\n                }\r\n                else {\r\n                    // File exists.\r\n                    if (stats && stats.isDirectory()) {\r\n                        return cb(FileError.EISDIR(p));\r\n                    }\r\n                    switch (flag.pathExistsAction()) {\r\n                        case ActionType.THROW_EXCEPTION:\r\n                            return cb(FileError.EEXIST(p));\r\n                        case ActionType.TRUNCATE_FILE:\r\n                            // NOTE: In a previous implementation, we deleted the file and\r\n                            // re-created it. However, this created a race condition if another\r\n                            // asynchronous request was trying to read the file, as the file\r\n                            // would not exist for a small period of time.\r\n                            return this.openFile(p, flag, (e, fd) => {\r\n                                if (e) {\r\n                                    cb(e);\r\n                                }\r\n                                else if (fd) {\r\n                                    fd.truncate(0, () => {\r\n                                        fd.sync(() => {\r\n                                            cb(null, fd);\r\n                                        });\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    fail();\r\n                                }\r\n                            });\r\n                        case ActionType.NOP:\r\n                            return this.openFile(p, flag, cb);\r\n                        default:\r\n                            return cb(new FileError(ErrorCodes.EINVAL, 'Invalid FileFlag object.'));\r\n                    }\r\n                }\r\n            };\r\n            this.stat(p, false, mustBeFile);\r\n        }\r\n        rename(oldPath, newPath, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        renameSync(oldPath, newPath) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        stat(p, isLstat, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        statSync(p, isLstat) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        /**\r\n         * Opens the file at path p with the given flag. The file must exist.\r\n         * @param p The path to open.\r\n         * @param flag The flag to use when opening the file.\r\n         * @return A File object corresponding to the opened file.\r\n         */\r\n        openFileSync(p, flag, mode) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        /**\r\n         * Create the file at path p with the given mode. Then, open it with the given\r\n         * flag.\r\n         */\r\n        createFileSync(p, flag, mode) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        openSync(p, flag, mode) {\r\n            // Check if the path exists, and is a file.\r\n            let stats;\r\n            try {\r\n                stats = this.statSync(p, false);\r\n            }\r\n            catch (e) {\r\n                // File does not exist.\r\n                switch (flag.pathNotExistsAction()) {\r\n                    case ActionType.CREATE_FILE:\r\n                        // Ensure parent exists.\r\n                        const parentStats = this.statSync(paths.dirname(p), false);\r\n                        if (!parentStats.isDirectory()) {\r\n                            throw FileError.ENOTDIR(paths.dirname(p));\r\n                        }\r\n                        return this.createFileSync(p, flag, mode);\r\n                    case ActionType.THROW_EXCEPTION:\r\n                        throw FileError.ENOENT(p);\r\n                    default:\r\n                        throw new FileError(ErrorCodes.EINVAL, 'Invalid FileFlag object.');\r\n                }\r\n            }\r\n            // File exists.\r\n            if (stats.isDirectory()) {\r\n                throw FileError.EISDIR(p);\r\n            }\r\n            switch (flag.pathExistsAction()) {\r\n                case ActionType.THROW_EXCEPTION:\r\n                    throw FileError.EEXIST(p);\r\n                case ActionType.TRUNCATE_FILE:\r\n                    // Delete file.\r\n                    this.unlinkSync(p);\r\n                    // Create file. Use the same mode as the old file.\r\n                    // Node itself modifies the ctime when this occurs, so this action\r\n                    // will preserve that behavior if the underlying file system\r\n                    // supports those properties.\r\n                    return this.createFileSync(p, flag, stats.mode);\r\n                case ActionType.NOP:\r\n                    return this.openFileSync(p, flag, mode);\r\n                default:\r\n                    throw new FileError(ErrorCodes.EINVAL, 'Invalid FileFlag object.');\r\n            }\r\n        }\r\n        unlink(p, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        unlinkSync(p) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        rmdir(p, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        rmdirSync(p) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        mkdir(p, mode, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        mkdirSync(p, mode) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        readdir(p, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        readdirSync(p) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        exists(p, cb) {\r\n            this.stat(p, null, function (err) {\r\n                cb(!err);\r\n            });\r\n        }\r\n        existsSync(p) {\r\n            try {\r\n                this.statSync(p, true);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                return false;\r\n            }\r\n        }\r\n        realpath(p, cache, cb) {\r\n            if (this.supportsLinks()) {\r\n                // The path could contain symlinks. Split up the path,\r\n                // resolve any symlinks, return the resolved string.\r\n                const splitPath = p.split(paths.sep);\r\n                // TODO: Simpler to just pass through file, find sep and such.\r\n                for (let i = 0; i < splitPath.length; i++) {\r\n                    const addPaths = splitPath.slice(0, i + 1);\r\n                    splitPath[i] = paths.join.apply(null, addPaths);\r\n                }\r\n            }\r\n            else {\r\n                // No symlinks. We just need to verify that it exists.\r\n                this.exists(p, function (doesExist) {\r\n                    if (doesExist) {\r\n                        cb(null, p);\r\n                    }\r\n                    else {\r\n                        cb(FileError.ENOENT(p));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        realpathSync(p, cache) {\r\n            if (this.supportsLinks()) {\r\n                // The path could contain symlinks. Split up the path,\r\n                // resolve any symlinks, return the resolved string.\r\n                const splitPath = p.split(paths.sep);\r\n                // TODO: Simpler to just pass through file, find sep and such.\r\n                for (let i = 0; i < splitPath.length; i++) {\r\n                    const addPaths = splitPath.slice(0, i + 1);\r\n                    splitPath[i] = paths.join.apply(path, addPaths);\r\n                }\r\n                return splitPath.join(paths.sep);\r\n            }\r\n            else {\r\n                // No symlinks. We just need to verify that it exists.\r\n                if (this.existsSync(p)) {\r\n                    return p;\r\n                }\r\n                else {\r\n                    throw FileError.ENOENT(p);\r\n                }\r\n            }\r\n        }\r\n        truncate(p, len, cb) {\r\n            this.open(p, FileFlag.getFileFlag('r+'), 0x1a4, (function (er, fd) {\r\n                if (er) {\r\n                    return cb(er);\r\n                }\r\n                fd.truncate(len, (function (er) {\r\n                    fd.close((function (er2) {\r\n                        cb(er || er2);\r\n                    }));\r\n                }));\r\n            }));\r\n        }\r\n        truncateSync(p, len) {\r\n            const fd = this.openSync(p, FileFlag.getFileFlag('r+'), 0x1a4);\r\n            // Need to safely close FD, regardless of whether or not truncate succeeds.\r\n            try {\r\n                fd.truncateSync(len);\r\n            }\r\n            catch (e) {\r\n                throw e;\r\n            }\r\n            finally {\r\n                fd.closeSync();\r\n            }\r\n        }\r\n        readFile(fname, encoding, flag, cb) {\r\n            // Wrap cb in file closing code.\r\n            const oldCb = cb;\r\n            // Get file.\r\n            this.open(fname, flag, 0x1a4, (err, fd) => {\r\n                if (err) {\r\n                    return cb(err);\r\n                }\r\n                cb = function (err, arg) {\r\n                    fd.close(function (err2) {\r\n                        if (!err) {\r\n                            err = err2;\r\n                        }\r\n                        return oldCb(err, arg);\r\n                    });\r\n                };\r\n                fd.stat((err, stat) => {\r\n                    if (err) {\r\n                        return cb(err);\r\n                    }\r\n                    // Allocate buffer.\r\n                    const buf = Buffer.alloc(stat.size);\r\n                    fd.read(buf, 0, stat.size, 0, (err) => {\r\n                        if (err) {\r\n                            return cb(err);\r\n                        }\r\n                        else if (encoding === null) {\r\n                            return cb(err, buf);\r\n                        }\r\n                        try {\r\n                            cb(null, buf.toString(encoding));\r\n                        }\r\n                        catch (e) {\r\n                            cb(e);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        readFileSync(fname, encoding, flag) {\r\n            // Get file.\r\n            const fd = this.openSync(fname, flag, 0x1a4);\r\n            try {\r\n                const stat = fd.statSync();\r\n                // Allocate buffer.\r\n                const buf = Buffer.alloc(stat.size);\r\n                fd.readSync(buf, 0, stat.size, 0);\r\n                fd.closeSync();\r\n                if (encoding === null) {\r\n                    return buf;\r\n                }\r\n                return buf.toString(encoding);\r\n            }\r\n            finally {\r\n                fd.closeSync();\r\n            }\r\n        }\r\n        writeFile(fname, data, encoding, flag, mode, cb) {\r\n            // Wrap cb in file closing code.\r\n            const oldCb = cb;\r\n            // Get file.\r\n            this.open(fname, flag, 0x1a4, function (err, fd) {\r\n                if (err) {\r\n                    return cb(err);\r\n                }\r\n                cb = function (err) {\r\n                    fd.close(function (err2) {\r\n                        oldCb(err ? err : err2);\r\n                    });\r\n                };\r\n                try {\r\n                    if (typeof data === 'string') {\r\n                        data = Buffer.from(data, encoding);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    return cb(e);\r\n                }\r\n                // Write into file.\r\n                fd.write(data, 0, data.length, 0, cb);\r\n            });\r\n        }\r\n        writeFileSync(fname, data, encoding, flag, mode) {\r\n            // Get file.\r\n            const fd = this.openSync(fname, flag, mode);\r\n            try {\r\n                if (typeof data === 'string') {\r\n                    data = Buffer.from(data, encoding);\r\n                }\r\n                // Write into file.\r\n                fd.writeSync(data, 0, data.length, 0);\r\n            }\r\n            finally {\r\n                fd.closeSync();\r\n            }\r\n        }\r\n        appendFile(fname, data, encoding, flag, mode, cb) {\r\n            // Wrap cb in file closing code.\r\n            const oldCb = cb;\r\n            this.open(fname, flag, mode, function (err, fd) {\r\n                if (err) {\r\n                    return cb(err);\r\n                }\r\n                cb = function (err) {\r\n                    fd.close(function (err2) {\r\n                        oldCb(err ? err : err2);\r\n                    });\r\n                };\r\n                if (typeof data === 'string') {\r\n                    data = Buffer.from(data, encoding);\r\n                }\r\n                fd.write(data, 0, data.length, null, cb);\r\n            });\r\n        }\r\n        appendFileSync(fname, data, encoding, flag, mode) {\r\n            const fd = this.openSync(fname, flag, mode);\r\n            try {\r\n                if (typeof data === 'string') {\r\n                    data = Buffer.from(data, encoding);\r\n                }\r\n                fd.writeSync(data, 0, data.length, null);\r\n            }\r\n            finally {\r\n                fd.closeSync();\r\n            }\r\n        }\r\n        chmod(p, isLchmod, mode, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        chmodSync(p, isLchmod, mode) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        chown(p, isLchown, uid, gid, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        chownSync(p, isLchown, uid, gid) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        utimes(p, atime, mtime, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        utimesSync(p, atime, mtime) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        link(srcpath, dstpath, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        linkSync(srcpath, dstpath) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        symlink(srcpath, dstpath, type, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        symlinkSync(srcpath, dstpath, type) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n        readlink(p, cb) {\r\n            cb(new FileError(ErrorCodes.ENOTSUP));\r\n        }\r\n        readlinkSync(p) {\r\n            throw new FileError(ErrorCodes.ENOTSUP);\r\n        }\r\n    }\r\n\r\n\r\n    return files.providers.BaseProvider = BaseProvider;\r\n});"]}