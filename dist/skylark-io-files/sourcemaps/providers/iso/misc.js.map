{"version":3,"sources":["providers/iso/misc.js"],"names":["define","getASCIIString","data","startIndex","length","toString","trim","constructSystemUseEntry","bigData","i","slice","sue","SystemUseEntry","signatureWord","CEEntry","PDEntry","SPEntry","STEntry","EREntry","ESEntry","PXEntry","PNEntry","SLEntry","NMEntry","CLEntry","PLEntry","REEntry","TFEntry","SFEntry","RREntry","getJolietString","String","fromCharCode","pairs","Math","floor","chars","Array","let","pos","join","getDate","year","parseInt","mon","day","hour","min","sec","hundrethsSec","Date","getShortFormDate","yearsSince1900","month","minute","second","constructSystemUseEntries","len","isoData","entries","entry","concat","getEntries","push"],"mappings":"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","file":"../../../providers/iso/misc.js","sourcesContent":["define([\r\n], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    const rockRidgeIdentifier = \"IEEE_P1282\";\r\n    /**\r\n     * @hidden\r\n     */\r\n    function getASCIIString(data, startIndex, length) {\r\n        return data.toString('ascii', startIndex, startIndex + length).trim();\r\n    }\r\n    /**\r\n     * @hidden\r\n     */\r\n    function getJolietString(data, startIndex, length) {\r\n        if (length === 1) {\r\n            // Special: Root, parent, current directory are still a single byte.\r\n            return String.fromCharCode(data[startIndex]);\r\n        }\r\n        // UTF16-BE, which isn't natively supported by NodeJS Buffers.\r\n        // Length should be even, but pessimistically floor just in case.\r\n        const pairs = Math.floor(length / 2);\r\n        const chars = new Array(pairs);\r\n        for (let i = 0; i < pairs; i++) {\r\n            const pos = startIndex + (i << 1);\r\n            chars[i] = String.fromCharCode(data[pos + 1] | (data[pos] << 8));\r\n        }\r\n        return chars.join('');\r\n    }\r\n    /**\r\n     * @hidden\r\n     */\r\n    function getDate(data, startIndex) {\r\n        const year = parseInt(getASCIIString(data, startIndex, 4), 10);\r\n        const mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);\r\n        const day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);\r\n        const hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);\r\n        const min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);\r\n        const sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);\r\n        const hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10);\r\n        // Last is a time-zone offset, but JavaScript dates don't support time zones well.\r\n        return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);\r\n    }\r\n    /**\r\n     * @hidden\r\n     */\r\n    function getShortFormDate(data, startIndex) {\r\n        const yearsSince1900 = data[startIndex];\r\n        const month = data[startIndex + 1];\r\n        const day = data[startIndex + 2];\r\n        const hour = data[startIndex + 3];\r\n        const minute = data[startIndex + 4];\r\n        const second = data[startIndex + 5];\r\n        // JavaScript's Date support isn't so great; ignore timezone.\r\n        // const offsetFromGMT = this._data[24];\r\n        return new Date(yearsSince1900, month - 1, day, hour, minute, second);\r\n    }\r\n    /**\r\n     * @hidden\r\n     */\r\n    function constructSystemUseEntry(bigData, i) {\r\n        const data = bigData.slice(i);\r\n        const sue = new SystemUseEntry(data);\r\n        switch (sue.signatureWord()) {\r\n            case 17221 /* CE */:\r\n                return new CEEntry(data);\r\n            case 20548 /* PD */:\r\n                return new PDEntry(data);\r\n            case 21328 /* SP */:\r\n                return new SPEntry(data);\r\n            case 21332 /* ST */:\r\n                return new STEntry(data);\r\n            case 17746 /* ER */:\r\n                return new EREntry(data);\r\n            case 17747 /* ES */:\r\n                return new ESEntry(data);\r\n            case 20568 /* PX */:\r\n                return new PXEntry(data);\r\n            case 20558 /* PN */:\r\n                return new PNEntry(data);\r\n            case 21324 /* SL */:\r\n                return new SLEntry(data);\r\n            case 20045 /* NM */:\r\n                return new NMEntry(data);\r\n            case 17228 /* CL */:\r\n                return new CLEntry(data);\r\n            case 20556 /* PL */:\r\n                return new PLEntry(data);\r\n            case 21061 /* RE */:\r\n                return new REEntry(data);\r\n            case 21574 /* TF */:\r\n                return new TFEntry(data);\r\n            case 21318 /* SF */:\r\n                return new SFEntry(data);\r\n            case 21074 /* RR */:\r\n                return new RREntry(data);\r\n            default:\r\n                return sue;\r\n        }\r\n    }\r\n    /**\r\n     * @hidden\r\n     */\r\n    function constructSystemUseEntries(data, i, len, isoData) {\r\n        // If the remaining allocated space following the last recorded System Use Entry in a System\r\n        // Use field or Continuation Area is less than four bytes long, it cannot contain a System\r\n        // Use Entry and shall be ignored\r\n        len = len - 4;\r\n        let entries = new Array();\r\n        while (i < len) {\r\n            const entry = constructSystemUseEntry(data, i);\r\n            const length = entry.length();\r\n            if (length === 0) {\r\n                // Invalid SU section; prevent infinite loop.\r\n                return entries;\r\n            }\r\n            i += length;\r\n            if (entry instanceof STEntry) {\r\n                // ST indicates the end of entries.\r\n                break;\r\n            }\r\n            if (entry instanceof CEEntry) {\r\n                entries = entries.concat(entry.getEntries(isoData));\r\n            }\r\n            else {\r\n                entries.push(entry);\r\n            }\r\n        }\r\n        return entries;\r\n    }\r\n\r\n\r\n    return {\r\n        getASCIIString,\r\n        getJolietString,\r\n        getDate,\r\n        getShortFormDate,\r\n        constructSystemUseEntry,\r\n        constructSystemUseEntries\r\n    };\r\n});"]}