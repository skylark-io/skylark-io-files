{"version":3,"sources":["providers/html5/html5-lfs-file.js"],"names":["define","utils","PreloadFile","buffer2ArrayBuffer","Html5LfsFile","constructor","fs","entry","path","flag","stat","contents","super","this","_entry","sync","cb","isDirty","createWriter","buffer","getBuffer","blob","Blob","length","size","writer","onwriteend","onerror","truncate","resetDirty","convertError","err","getPath","write","close"],"mappings":";;;;;;;AAAAA,OAAO,CACH,cACA,sBACD,SAAUC,EAAMC,GACf,aAEA,MAAQC,EAA2CF,EAA3CE,4BASFC,UAAqBF,EACvBG,YAAYC,EAAIC,EAAOC,EAAMC,EAAMC,EAAMC,GACrCC,MAAMN,EAAIE,EAAMC,EAAMC,EAAMC,CAAQ,EACpCE,KAAKC,OAASP,CAClB,CACAQ,KAAKC,GACD,GAAI,CAACH,KAAKI,QAAQ,EACd,OAAOD,EAAG,EAEdH,KAAKC,OAAOI,aAAa,IACrB,IAAMC,EAASN,KAAKO,UAAU,EACxBC,EAAO,IAAIC,KAAK,CAACnB,EAAmBgB,CAAM,EAAE,EAClD,MAAMI,EAASF,EAAKG,KACpBC,EAAOC,WAAa,IAChBD,EAAOC,WAAa,KACpBD,EAAOE,QAAU,KACjBF,EAAOG,SAASL,CAAM,EACtBV,KAAKgB,WAAW,EAChBb,EAAG,CACP,EACAS,EAAOE,QAAU,IACbX,EAAGc,aAAaC,EAAKlB,KAAKmB,QAAQ,EAAG,CAAA,CAAK,CAAC,CAC/C,EACAP,EAAOQ,MAAMZ,CAAI,CACrB,CAAC,CACL,CACAa,MAAMlB,GACFH,KAAKE,KAAKC,CAAE,CAChB,CACJ,CAGA,OAAOZ,CACX,CAAC","file":"../../../providers/html5/html5-lfs-file.js","sourcesContent":["define([\r\n    \"../../utils\",\r\n    '../../preload-file'\r\n], function (utils,PreloadFile) {\r\n    'use strict';\r\n\r\n    const { buffer2ArrayBuffer, arrayBuffer2Buffer } = utils;\r\n\r\n    // A note about getFile and getDirectory options:\r\n    // These methods are called at numerous places in this file, and are passed\r\n    // some combination of these two options:\r\n    //   - create: If true, the entry will be created if it doesn't exist.\r\n    //             If false, an error will be thrown if it doesn't exist.\r\n    //   - exclusive: If true, only create the entry if it doesn't already exist,\r\n    //                and throw an error if it does.\r\n    class Html5LfsFile extends PreloadFile {\r\n        constructor(fs, entry, path, flag, stat, contents) {\r\n            super(fs, path, flag, stat, contents);\r\n            this._entry = entry;\r\n        }\r\n        sync(cb) {\r\n            if (!this.isDirty()) {\r\n                return cb();\r\n            }\r\n            this._entry.createWriter((writer) => {\r\n                const buffer = this.getBuffer();\r\n                const blob = new Blob([buffer2ArrayBuffer(buffer)]);\r\n                const length = blob.size;\r\n                writer.onwriteend = (err) => {\r\n                    writer.onwriteend = null;\r\n                    writer.onerror = null;\r\n                    writer.truncate(length);\r\n                    this.resetDirty();\r\n                    cb();\r\n                };\r\n                writer.onerror = (err) => {\r\n                    cb(convertError(err, this.getPath(), false));\r\n                };\r\n                writer.write(blob);\r\n            });\r\n        }\r\n        close(cb) {\r\n            this.sync(cb);\r\n        }\r\n    }\r\n\r\n\r\n    return Html5LfsFile;\r\n});"]}